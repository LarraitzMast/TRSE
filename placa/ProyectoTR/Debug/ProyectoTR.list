
ProyectoTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007498  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077bc  080077bc  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c4  080077c4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080077cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049e0  20000028  080077f4  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a08  080077f4  00024a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001442a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000323b  00000000  00000000  00034482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  000376c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00038720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033bb  00000000  00000000  00039668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012009  00000000  00000000  0003ca23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fb4c  00000000  00000000  0004ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a4  00000000  00000000  000de5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007620 	.word	0x08007620

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08007620 	.word	0x08007620

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <stateKeyBoard>:
/* MAQUINA DE ESTADO*/

uint32_t current_millis = 0, previous_millis = 0;
uint8_t key_state = SENDING_TLF_NUMBER;

void stateKeyBoard(char rxCharacter) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	71fb      	strb	r3, [r7, #7]

	//Si demanda tipo de emergencia siempre activar estado tipo de emergencia
	if (rxCharacter == ASK_TO_EMERGENCY) {
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	2b3f      	cmp	r3, #63	; 0x3f
 80004f2:	d103      	bne.n	80004fc <stateKeyBoard+0x18>
		key_state = SENDING_EMERGENCY;
 80004f4:	4b15      	ldr	r3, [pc, #84]	; (800054c <stateKeyBoard+0x68>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	701a      	strb	r2, [r3, #0]
		return;
 80004fa:	e024      	b.n	8000546 <stateKeyBoard+0x62>
	}

	switch (key_state) {
 80004fc:	4b13      	ldr	r3, [pc, #76]	; (800054c <stateKeyBoard+0x68>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d002      	beq.n	800050a <stateKeyBoard+0x26>
 8000504:	2b02      	cmp	r3, #2
 8000506:	d00c      	beq.n	8000522 <stateKeyBoard+0x3e>
 8000508:	e01d      	b.n	8000546 <stateKeyBoard+0x62>
	case SENDING_TLF_NUMBER: // Estado donde se envia solo numeros
		if (!isANumber(rxCharacter))
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f81f 	bl	8000550 <isANumber>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d013      	beq.n	8000540 <stateKeyBoard+0x5c>
			break;
		sendUARTMensaje(rxCharacter);
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	4618      	mov	r0, r3
 800051c:	f000 f934 	bl	8000788 <sendUARTMensaje>
		break;
 8000520:	e011      	b.n	8000546 <stateKeyBoard+0x62>
	case SENDING_EMERGENCY: // Estado donde se envia solo letras o tipo de emergencia
		if (!isAnEmergencyType(rxCharacter))
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	4618      	mov	r0, r3
 8000526:	f000 f828 	bl	800057a <isAnEmergencyType>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d009      	beq.n	8000544 <stateKeyBoard+0x60>
			break;
		key_state = SENDING_TLF_NUMBER;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <stateKeyBoard+0x68>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
		sendUARTMensaje(rxCharacter);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4618      	mov	r0, r3
 800053a:	f000 f925 	bl	8000788 <sendUARTMensaje>
 800053e:	e002      	b.n	8000546 <stateKeyBoard+0x62>
			break;
 8000540:	bf00      	nop
 8000542:	e000      	b.n	8000546 <stateKeyBoard+0x62>
			break;
 8000544:	bf00      	nop
	}

}
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000000 	.word	0x20000000

08000550 <isANumber>:

int8_t isANumber(char character) {
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	return character >= '0' && character <= '9';
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b2f      	cmp	r3, #47	; 0x2f
 800055e:	d904      	bls.n	800056a <isANumber+0x1a>
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b39      	cmp	r3, #57	; 0x39
 8000564:	d801      	bhi.n	800056a <isANumber+0x1a>
 8000566:	2301      	movs	r3, #1
 8000568:	e000      	b.n	800056c <isANumber+0x1c>
 800056a:	2300      	movs	r3, #0
 800056c:	b25b      	sxtb	r3, r3
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <isAnEmergencyType>:

int8_t isAnEmergencyType(char character) {
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
	return character >= 'A' && character <= 'D';
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b40      	cmp	r3, #64	; 0x40
 8000588:	d904      	bls.n	8000594 <isAnEmergencyType+0x1a>
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	2b44      	cmp	r3, #68	; 0x44
 800058e:	d801      	bhi.n	8000594 <isAnEmergencyType+0x1a>
 8000590:	2301      	movs	r3, #1
 8000592:	e000      	b.n	8000596 <isAnEmergencyType+0x1c>
 8000594:	2300      	movs	r3, #0
 8000596:	b25b      	sxtb	r3, r3
}
 8000598:	4618      	mov	r0, r3
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <delayKey>:

char keypad[4][4] = { { '1', '2', '3', 'A' }, { '4', '5', '6', 'B' }, { '7',
		'8', '9', 'C' }, { '*', '0', '#', 'D' } };

//Retardo pare evitar rebotes
uint8_t delayKey() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	current_millis = HAL_GetTick();
 80005a8:	f000 fe90 	bl	80012cc <HAL_GetTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a07      	ldr	r2, [pc, #28]	; (80005cc <delayKey+0x28>)
 80005b0:	6013      	str	r3, [r2, #0]
	if (current_millis - previous_millis <= 250) {
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <delayKey+0x28>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <delayKey+0x2c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	2bfa      	cmp	r3, #250	; 0xfa
 80005be:	d801      	bhi.n	80005c4 <delayKey+0x20>
		return 1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	e000      	b.n	80005c6 <delayKey+0x22>
	}
	return 0;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000044 	.word	0x20000044
 80005d0:	20000048 	.word	0x20000048

080005d4 <handleKeyBoard>:

//Enviar key del teclado
void handleKeyBoard(uint8_t row) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	71fb      	strb	r3, [r7, #7]
	uint8_t column = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	77fb      	strb	r3, [r7, #31]

	//Lectura de columana
	for (int i = 0; i < 4; i++) {
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	e008      	b.n	80005fa <handleKeyBoard+0x26>
		writeColum(i, GPIO_PIN_RESET);
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f84e 	bl	8000690 <writeColum>
	for (int i = 0; i < 4; i++) {
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	3301      	adds	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
 80005fa:	69bb      	ldr	r3, [r7, #24]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	ddf3      	ble.n	80005e8 <handleKeyBoard+0x14>
	}

	for (int i = 0; i < 4; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e017      	b.n	8000636 <handleKeyBoard+0x62>
		writeColum(i, GPIO_PIN_SET);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2101      	movs	r1, #1
 800060c:	4618      	mov	r0, r3
 800060e:	f000 f83f 	bl	8000690 <writeColum>
		if (readRow(row) == GPIO_PIN_SET) {
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 f879 	bl	800070c <readRow>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d101      	bne.n	8000624 <handleKeyBoard+0x50>
			column = i;
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	77fb      	strb	r3, [r7, #31]
		}
		writeColum(i, GPIO_PIN_RESET);
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f830 	bl	8000690 <writeColum>
	for (int i = 0; i < 4; i++) {
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b03      	cmp	r3, #3
 800063a:	dde4      	ble.n	8000606 <handleKeyBoard+0x32>
	}

	//Enviar key
	char msg = keypad[row][column];
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4910      	ldr	r1, [pc, #64]	; (8000684 <handleKeyBoard+0xb0>)
 8000642:	0092      	lsls	r2, r2, #2
 8000644:	440a      	add	r2, r1
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	73fb      	strb	r3, [r7, #15]
	msgKey(msg);
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f942 	bl	80008d8 <msgKey>

	//Poner a espera parametros
	for (int i = 0; i < 4; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	e008      	b.n	800066c <handleKeyBoard+0x98>
		writeColum(i, GPIO_PIN_SET);
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f000 f815 	bl	8000690 <writeColum>
	for (int i = 0; i < 4; i++) {
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	3301      	adds	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	2b03      	cmp	r3, #3
 8000670:	ddf3      	ble.n	800065a <handleKeyBoard+0x86>
	}

	previous_millis = current_millis;
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <handleKeyBoard+0xb4>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <handleKeyBoard+0xb8>)
 8000678:	6013      	str	r3, [r2, #0]
}
 800067a:	bf00      	nop
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000004 	.word	0x20000004
 8000688:	20000044 	.word	0x20000044
 800068c:	20000048 	.word	0x20000048

08000690 <writeColum>:

//Escribir pinout columna keypad
void writeColum(uint8_t numOfCol, GPIO_PinState PinState) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	460a      	mov	r2, r1
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	71bb      	strb	r3, [r7, #6]
	switch (numOfCol) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d827      	bhi.n	80006f6 <writeColum+0x66>
 80006a6:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <writeColum+0x1c>)
 80006a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ac:	080006bd 	.word	0x080006bd
 80006b0:	080006cd 	.word	0x080006cd
 80006b4:	080006db 	.word	0x080006db
 80006b8:	080006e9 	.word	0x080006e9
	case 0:
		HAL_GPIO_WritePin(REG_KEY_COL_0, PIN_KEY_COL_0, PinState);
 80006bc:	79bb      	ldrb	r3, [r7, #6]
 80006be:	461a      	mov	r2, r3
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	480e      	ldr	r0, [pc, #56]	; (8000700 <writeColum+0x70>)
 80006c6:	f001 f94d 	bl	8001964 <HAL_GPIO_WritePin>
		break;
 80006ca:	e014      	b.n	80006f6 <writeColum+0x66>

	case 1:
		HAL_GPIO_WritePin(REG_KEY_COL_1, PIN_KEY_COL_1, PinState);
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	461a      	mov	r2, r3
 80006d0:	2101      	movs	r1, #1
 80006d2:	480c      	ldr	r0, [pc, #48]	; (8000704 <writeColum+0x74>)
 80006d4:	f001 f946 	bl	8001964 <HAL_GPIO_WritePin>
		break;
 80006d8:	e00d      	b.n	80006f6 <writeColum+0x66>

	case 2:
		HAL_GPIO_WritePin(REG_KEY_COL_2, PIN_KEY_COL_2, PinState);
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	461a      	mov	r2, r3
 80006de:	2102      	movs	r1, #2
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <writeColum+0x78>)
 80006e2:	f001 f93f 	bl	8001964 <HAL_GPIO_WritePin>
		break;
 80006e6:	e006      	b.n	80006f6 <writeColum+0x66>

	case 3:
		HAL_GPIO_WritePin(REG_KEY_COL_3, PIN_KEY_COL_3, PinState);
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	461a      	mov	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <writeColum+0x78>)
 80006f0:	f001 f938 	bl	8001964 <HAL_GPIO_WritePin>
		break;
 80006f4:	bf00      	nop
	}
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40020800 	.word	0x40020800

0800070c <readRow>:

//Leer pinout columna keypad
uint8_t readRow(uint8_t numOfRow) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	uint8_t rowValue = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	73fb      	strb	r3, [r7, #15]
	switch (numOfRow) {
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d829      	bhi.n	8000774 <readRow+0x68>
 8000720:	a201      	add	r2, pc, #4	; (adr r2, 8000728 <readRow+0x1c>)
 8000722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000726:	bf00      	nop
 8000728:	08000739 	.word	0x08000739
 800072c:	08000747 	.word	0x08000747
 8000730:	08000755 	.word	0x08000755
 8000734:	08000765 	.word	0x08000765
	case 0:
		rowValue = HAL_GPIO_ReadPin(REG_KEY_ROW_0, PIN_KEY_ROW_0);
 8000738:	2140      	movs	r1, #64	; 0x40
 800073a:	4811      	ldr	r0, [pc, #68]	; (8000780 <readRow+0x74>)
 800073c:	f001 f8fa 	bl	8001934 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	73fb      	strb	r3, [r7, #15]
		break;
 8000744:	e016      	b.n	8000774 <readRow+0x68>

	case 1:
		rowValue = HAL_GPIO_ReadPin(REG_KEY_ROW_1, PIN_KEY_ROW_1);
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <readRow+0x74>)
 800074a:	f001 f8f3 	bl	8001934 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	73fb      	strb	r3, [r7, #15]
		break;
 8000752:	e00f      	b.n	8000774 <readRow+0x68>

	case 2:
		rowValue = HAL_GPIO_ReadPin(REG_KEY_ROW_2, PIN_KEY_ROW_2);
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	480a      	ldr	r0, [pc, #40]	; (8000784 <readRow+0x78>)
 800075a:	f001 f8eb 	bl	8001934 <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
		break;
 8000762:	e007      	b.n	8000774 <readRow+0x68>

	case 3:
		rowValue = HAL_GPIO_ReadPin(REG_KEY_ROW_3, PIN_KEY_ROW_3);
 8000764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <readRow+0x78>)
 800076a:	f001 f8e3 	bl	8001934 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	73fb      	strb	r3, [r7, #15]
		break;
 8000772:	bf00      	nop
	}
	return rowValue;
 8000774:	7bfb      	ldrb	r3, [r7, #15]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40020000 	.word	0x40020000
 8000784:	40020800 	.word	0x40020800

08000788 <sendUARTMensaje>:

/* Envio mensaje UART ---------------------------------------------------------*/
//El dato enviado es un caracter. Funcion utilizada por todas las tareas por lo
//que el uso de recurso comun esta protegido por mutex

void sendUARTMensaje(uint8_t msg) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(uartMutexHandle, osWaitForever);
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <sendUARTMensaje+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800079a:	4618      	mov	r0, r3
 800079c:	f003 f90c 	bl	80039b8 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, &msg, sizeof(msg), 50);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2332      	movs	r3, #50	; 0x32
 80007a4:	2201      	movs	r2, #1
 80007a6:	4807      	ldr	r0, [pc, #28]	; (80007c4 <sendUARTMensaje+0x3c>)
 80007a8:	f001 fdcd 	bl	8002346 <HAL_UART_Transmit>
	osMutexRelease(uartMutexHandle);
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <sendUARTMensaje+0x38>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 f94c 	bl	8003a4e <osMutexRelease>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000ac 	.word	0x200000ac
 80007c4:	20000050 	.word	0x20000050

080007c8 <HAL_UART_RxCpltCallback>:
/* Recepcion mensaje UART ---------------------------------------------------------*/
//Interrupcion UART. El caracter recibido puede estar relacinado
//con la gestion del keyboard o semaforo. Los caracteres recibidos
//se almacenan en las colas keysHandle y semaforoHandle

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	osMessageQueuePut(semaforoHandle, &rx_buffer, 0, 0);
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_UART_RxCpltCallback+0x38>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	2200      	movs	r2, #0
 80007d8:	490a      	ldr	r1, [pc, #40]	; (8000804 <HAL_UART_RxCpltCallback+0x3c>)
 80007da:	f003 f9e9 	bl	8003bb0 <osMessageQueuePut>
	osMessageQueuePut(keysHandle, &rx_buffer, 0, 0);
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_UART_RxCpltCallback+0x40>)
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	2300      	movs	r3, #0
 80007e4:	2200      	movs	r2, #0
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <HAL_UART_RxCpltCallback+0x3c>)
 80007e8:	f003 f9e2 	bl	8003bb0 <osMessageQueuePut>
	HAL_UART_Receive_IT(&huart2, &rx_buffer, sizeof(rx_buffer));
 80007ec:	2201      	movs	r2, #1
 80007ee:	4905      	ldr	r1, [pc, #20]	; (8000804 <HAL_UART_RxCpltCallback+0x3c>)
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <HAL_UART_RxCpltCallback+0x44>)
 80007f2:	f001 fe3a 	bl	800246a <HAL_UART_Receive_IT>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000a8 	.word	0x200000a8
 8000804:	2000004c 	.word	0x2000004c
 8000808:	200000a4 	.word	0x200000a4
 800080c:	20000050 	.word	0x20000050

08000810 <HAL_GPIO_EXTI_Callback>:
//Interrupcion por teclado o PIR :
//		* Interrupcion del teclado por linea. La obtencion del key
//		se realiza en el mismo teclado el valor se almacena en la cola keysHandle
//      * Interrupcion PIR: el valor de combio de estado se almacena la cola semaforoHandle
//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]

	uint8_t row = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	73fb      	strb	r3, [r7, #15]
	char msg = PIR_AMB;
 800081e:	2350      	movs	r3, #80	; 0x50
 8000820:	73bb      	strb	r3, [r7, #14]

	switch (GPIO_Pin) {
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000828:	d034      	beq.n	8000894 <HAL_GPIO_EXTI_Callback+0x84>
 800082a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800082e:	dc4d      	bgt.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
 8000830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000834:	d022      	beq.n	800087c <HAL_GPIO_EXTI_Callback+0x6c>
 8000836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800083a:	dc47      	bgt.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
 800083c:	2b80      	cmp	r3, #128	; 0x80
 800083e:	d011      	beq.n	8000864 <HAL_GPIO_EXTI_Callback+0x54>
 8000840:	2b80      	cmp	r3, #128	; 0x80
 8000842:	dc43      	bgt.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
 8000844:	2b20      	cmp	r3, #32
 8000846:	d031      	beq.n	80008ac <HAL_GPIO_EXTI_Callback+0x9c>
 8000848:	2b40      	cmp	r3, #64	; 0x40
 800084a:	d13f      	bne.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>

	case PIN_KEY_ROW_0:
		if (delayKey())
 800084c:	f7ff feaa 	bl	80005a4 <delayKey>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d133      	bne.n	80008be <HAL_GPIO_EXTI_Callback+0xae>
			return;
		row = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	73fb      	strb	r3, [r7, #15]
		handleKeyBoard(row);
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff feb9 	bl	80005d4 <handleKeyBoard>
		break;
 8000862:	e033      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
	case PIN_KEY_ROW_1:
		if (delayKey())
 8000864:	f7ff fe9e 	bl	80005a4 <delayKey>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d129      	bne.n	80008c2 <HAL_GPIO_EXTI_Callback+0xb2>
			return;
		row = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
		handleKeyBoard(row);
 8000872:	7bfb      	ldrb	r3, [r7, #15]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff fead 	bl	80005d4 <handleKeyBoard>
		break;
 800087a:	e027      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
	case PIN_KEY_ROW_2:
		if (delayKey())
 800087c:	f7ff fe92 	bl	80005a4 <delayKey>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d11f      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0xb6>
			return;
		row = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	73fb      	strb	r3, [r7, #15]
		handleKeyBoard(row);
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fea1 	bl	80005d4 <handleKeyBoard>
		break;
 8000892:	e01b      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
	case PIN_KEY_ROW_3:
		if (delayKey())
 8000894:	f7ff fe86 	bl	80005a4 <delayKey>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d115      	bne.n	80008ca <HAL_GPIO_EXTI_Callback+0xba>
			return;
		row = 3;
 800089e:	2303      	movs	r3, #3
 80008a0:	73fb      	strb	r3, [r7, #15]
		handleKeyBoard(row);
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe95 	bl	80005d4 <handleKeyBoard>
		break;
 80008aa:	e00f      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>

	case PIN_PIR:
		osMessageQueuePut(semaforoHandle, &msg, 0, 0);
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_GPIO_EXTI_Callback+0xc4>)
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	f107 010e 	add.w	r1, r7, #14
 80008b4:	2300      	movs	r3, #0
 80008b6:	2200      	movs	r2, #0
 80008b8:	f003 f97a 	bl	8003bb0 <osMessageQueuePut>
		break;
 80008bc:	e006      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
			return;
 80008be:	bf00      	nop
 80008c0:	e004      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
			return;
 80008c2:	bf00      	nop
 80008c4:	e002      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
			return;
 80008c6:	bf00      	nop
 80008c8:	e000      	b.n	80008cc <HAL_GPIO_EXTI_Callback+0xbc>
			return;
 80008ca:	bf00      	nop
	}
}
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000a8 	.word	0x200000a8

080008d8 <msgKey>:

/* Gestion recursos desde semaforo.c y keyboard.c ---------------------------------------------------------*/
//Escritura caracter cola  keysHandle
void msgKey(char msg) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	osMessageQueuePut(keysHandle, &msg, 0, 0);
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <msgKey+0x20>)
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	1df9      	adds	r1, r7, #7
 80008e8:	2300      	movs	r3, #0
 80008ea:	2200      	movs	r2, #0
 80008ec:	f003 f960 	bl	8003bb0 <osMessageQueuePut>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000a4 	.word	0x200000a4

080008fc <activarFagSemaforo>:

//Activar Sirena
void activarFagSemaforo() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	osEventFlagsSet(semEventHandle, FLAG_EVENTO_SIRENA);
 8000900:	4b03      	ldr	r3, [pc, #12]	; (8000910 <activarFagSemaforo+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2101      	movs	r1, #1
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fef4 	bl	80036f4 <osEventFlagsSet>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200000b0 	.word	0x200000b0

08000914 <desactivarFagSemaforo>:

//Desactivar Sirena
void desactivarFagSemaforo() {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	is_sirena = 0;
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <desactivarFagSemaforo+0x1c>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
	osEventFlagsClear(semEventHandle, FLAG_EVENTO_SIRENA);
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <desactivarFagSemaforo+0x20>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2101      	movs	r1, #1
 8000924:	4618      	mov	r0, r3
 8000926:	f002 ff29 	bl	800377c <osEventFlagsClear>
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000004d 	.word	0x2000004d
 8000934:	200000b0 	.word	0x200000b0

08000938 <suspenderTarea>:

//Suspender tarea semNormalTask
void suspenderTarea() {
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	osThreadSuspend(semNormalTaskHandle); // Boqueo tarea semNormalTask
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <suspenderTarea+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fe3b 	bl	80035bc <osThreadSuspend>
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000094 	.word	0x20000094

08000950 <activarTarea>:

//Activar tarea semNormalTask
void activarTarea() {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	osThreadResume(semNormalTaskHandle); // Reanudar tarea semNormalTask
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <activarTarea+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f002 fe50 	bl	80035fe <osThreadResume>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000094 	.word	0x20000094

08000968 <createOsObjects>:


/**
 * Crea los objetos del sistema operativo.
 */
void createOsObjects() {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	uartMutexHandle = osMutexNew(&uartMutex_attributes);
 800096c:	480e      	ldr	r0, [pc, #56]	; (80009a8 <createOsObjects+0x40>)
 800096e:	f002 ff9d 	bl	80038ac <osMutexNew>
 8000972:	4603      	mov	r3, r0
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <createOsObjects+0x44>)
 8000976:	6013      	str	r3, [r2, #0]

	keysHandle = osMessageQueueNew(4, sizeof(char), &keys_attributes);
 8000978:	4a0d      	ldr	r2, [pc, #52]	; (80009b0 <createOsObjects+0x48>)
 800097a:	2101      	movs	r1, #1
 800097c:	2004      	movs	r0, #4
 800097e:	f003 f8a3 	bl	8003ac8 <osMessageQueueNew>
 8000982:	4603      	mov	r3, r0
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <createOsObjects+0x4c>)
 8000986:	6013      	str	r3, [r2, #0]
	semaforoHandle = osMessageQueueNew(4, sizeof(char), &semaforo_attributes);
 8000988:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <createOsObjects+0x50>)
 800098a:	2101      	movs	r1, #1
 800098c:	2004      	movs	r0, #4
 800098e:	f003 f89b 	bl	8003ac8 <osMessageQueueNew>
 8000992:	4603      	mov	r3, r0
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <createOsObjects+0x54>)
 8000996:	6013      	str	r3, [r2, #0]

	semEventHandle = osEventFlagsNew(&semEvent_attributes);
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <createOsObjects+0x58>)
 800099a:	f002 fe6c 	bl	8003676 <osEventFlagsNew>
 800099e:	4603      	mov	r3, r0
 80009a0:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <createOsObjects+0x5c>)
 80009a2:	6013      	str	r3, [r2, #0]
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08007784 	.word	0x08007784
 80009ac:	200000ac 	.word	0x200000ac
 80009b0:	08007754 	.word	0x08007754
 80009b4:	200000a4 	.word	0x200000a4
 80009b8:	0800776c 	.word	0x0800776c
 80009bc:	200000a8 	.word	0x200000a8
 80009c0:	08007794 	.word	0x08007794
 80009c4:	200000b0 	.word	0x200000b0

080009c8 <createOsThreads>:

/**
 * Crea las diferentes tareas
 */
void createOsThreads() {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

	semNormalTaskHandle = osThreadNew(StartSemNormalTask, NULL,
 80009cc:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <createOsThreads+0x48>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4810      	ldr	r0, [pc, #64]	; (8000a14 <createOsThreads+0x4c>)
 80009d2:	f002 fd61 	bl	8003498 <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <createOsThreads+0x50>)
 80009da:	6013      	str	r3, [r2, #0]
			&semNormalTask_attributes);

	semGestionTaskHandle = osThreadNew(StartSemGestionTask, NULL,
 80009dc:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <createOsThreads+0x54>)
 80009de:	2100      	movs	r1, #0
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <createOsThreads+0x58>)
 80009e2:	f002 fd59 	bl	8003498 <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <createOsThreads+0x5c>)
 80009ea:	6013      	str	r3, [r2, #0]
			&semGestionTask_attributes);

	sirenaTaskHandle = osThreadNew(StartSirenaTask, NULL,
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <createOsThreads+0x60>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480e      	ldr	r0, [pc, #56]	; (8000a2c <createOsThreads+0x64>)
 80009f2:	f002 fd51 	bl	8003498 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <createOsThreads+0x68>)
 80009fa:	6013      	str	r3, [r2, #0]
			&sirenaTask_attributes);

	keyboardTaskHandle = osThreadNew(StartKeyboardTask, NULL,
 80009fc:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <createOsThreads+0x6c>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <createOsThreads+0x70>)
 8000a02:	f002 fd49 	bl	8003498 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <createOsThreads+0x74>)
 8000a0a:	6013      	str	r3, [r2, #0]
			&keyboardTask_attributes);
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	080076c4 	.word	0x080076c4
 8000a14:	08000d05 	.word	0x08000d05
 8000a18:	20000094 	.word	0x20000094
 8000a1c:	080076e8 	.word	0x080076e8
 8000a20:	08000d15 	.word	0x08000d15
 8000a24:	20000098 	.word	0x20000098
 8000a28:	0800770c 	.word	0x0800770c
 8000a2c:	08000d3d 	.word	0x08000d3d
 8000a30:	2000009c 	.word	0x2000009c
 8000a34:	08007730 	.word	0x08007730
 8000a38:	08000d89 	.word	0x08000d89
 8000a3c:	200000a0 	.word	0x200000a0

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f000 fbdb 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f825 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 f8ab 	bl	8000ba8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a52:	f000 f87f 	bl	8000b54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Pone a 1 los pines de columnas del teclado
	for (int i = 0; i < 4; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e008      	b.n	8000a6e <main+0x2e>
		writeColum(i, GPIO_PIN_SET);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe14 	bl	8000690 <writeColum>
	for (int i = 0; i < 4; i++)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	ddf3      	ble.n	8000a5c <main+0x1c>

	// Prepara el UART para recibir un caracter
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_buffer, sizeof(rx_buffer));
 8000a74:	2201      	movs	r2, #1
 8000a76:	4906      	ldr	r1, [pc, #24]	; (8000a90 <main+0x50>)
 8000a78:	4806      	ldr	r0, [pc, #24]	; (8000a94 <main+0x54>)
 8000a7a:	f001 fcf6 	bl	800246a <HAL_UART_Receive_IT>

	// Inicializa recursos
	createOsObjects();
 8000a7e:	f7ff ff73 	bl	8000968 <createOsObjects>
	createOsThreads();
 8000a82:	f7ff ffa1 	bl	80009c8 <createOsThreads>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a86:	f002 fcbd 	bl	8003404 <osKernelInitialize>
/**
* @}
*/

  /* Start scheduler */
  osKernelStart();
 8000a8a:	f002 fcdf 	bl	800344c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000a8e:	e7fe      	b.n	8000a8e <main+0x4e>
 8000a90:	2000004c 	.word	0x2000004c
 8000a94:	20000050 	.word	0x20000050

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	; 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2230      	movs	r2, #48	; 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f006 fdb2 	bl	8007610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <SystemClock_Config+0xb4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <SystemClock_Config+0xb4>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SystemClock_Config+0xb4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <SystemClock_Config+0xb8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <SystemClock_Config+0xb8>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <SystemClock_Config+0xb8>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0320 	add.w	r3, r7, #32
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 ff77 	bl	80019fc <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b14:	f000 f94c 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f9da 	bl	8001eec <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b3e:	f000 f937 	bl	8000db0 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	; 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART2_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART2_UART_Init+0x4c>)
 8000b8c:	f001 fb8e 	bl	80022ac <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f90b 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000050 	.word	0x20000050
 8000ba4:	40004400 	.word	0x40004400

08000ba8 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a4b      	ldr	r2, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b49      	ldr	r3, [pc, #292]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0304 	and.w	r3, r3, #4
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b45      	ldr	r3, [pc, #276]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a44      	ldr	r2, [pc, #272]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b42      	ldr	r3, [pc, #264]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a3d      	ldr	r2, [pc, #244]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <MX_GPIO_Init+0x14c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2103      	movs	r1, #3
 8000c16:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x150>)
 8000c18:	f000 fea4 	bl	8001964 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10,
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000c22:	4836      	ldr	r0, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x154>)
 8000c24:	f000 fe9e 	bl	8001964 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_3,
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f240 4109 	movw	r1, #1033	; 0x409
 8000c2e:	4834      	ldr	r0, [pc, #208]	; (8000d00 <MX_GPIO_Init+0x158>)
 8000c30:	f000 fe98 	bl	8001964 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000c34:	2303      	movs	r3, #3
 8000c36:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	4619      	mov	r1, r3
 8000c4a:	482b      	ldr	r0, [pc, #172]	; (8000cf8 <MX_GPIO_Init+0x150>)
 8000c4c:	f000 fcee 	bl	800162c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA8 PA9 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000c50:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000c54:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c62:	f107 030c 	add.w	r3, r7, #12
 8000c66:	4619      	mov	r1, r3
 8000c68:	4824      	ldr	r0, [pc, #144]	; (8000cfc <MX_GPIO_Init+0x154>)
 8000c6a:	f000 fcdf 	bl	800162c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000c6e:	23c0      	movs	r3, #192	; 0xc0
 8000c70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c72:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c76:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4619      	mov	r1, r3
 8000c82:	481e      	ldr	r0, [pc, #120]	; (8000cfc <MX_GPIO_Init+0x154>)
 8000c84:	f000 fcd2 	bl	800162c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c90:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_GPIO_Init+0x150>)
 8000c9e:	f000 fcc5 	bl	800162c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB10 PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_10 | GPIO_PIN_3;
 8000ca2:	f240 4309 	movw	r3, #1033	; 0x409
 8000ca6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 030c 	add.w	r3, r7, #12
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <MX_GPIO_Init+0x158>)
 8000cbc:	f000 fcb6 	bl	800162c <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000cc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <MX_GPIO_Init+0x150>)
 8000cd8:	f000 fca8 	bl	800162c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2107      	movs	r1, #7
 8000ce0:	2017      	movs	r0, #23
 8000ce2:	f000 fbda 	bl	800149a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ce6:	2017      	movs	r0, #23
 8000ce8:	f000 fbf3 	bl	80014d2 <HAL_NVIC_EnableIRQ>

}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020800 	.word	0x40020800
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020400 	.word	0x40020400

08000d04 <StartSemNormalTask>:
/**
 * Ejecucion funcion normal del semaforo.
 * Tarea que se suspende y se activa.
 *
/* USER CODE END Header_StartSemNormalTask */
void StartSemNormalTask(void *argument) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	for (;;) {
		runSemaforoNormal();
 8000d0c:	f000 f8ba 	bl	8000e84 <runSemaforoNormal>
 8000d10:	e7fc      	b.n	8000d0c <StartSemNormalTask+0x8>
	...

08000d14 <StartSemGestionTask>:
/* USER CODE BEGIN Header_StartSemGestionTask */
/**
 * Gestion estado del semaforo.
*/
/* USER CODE END Header_StartSemGestionTask */
void StartSemGestionTask(void *argument) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	char rxChar;
	for (;;) {
		osMessageQueueGet(semaforoHandle, &rxChar, NULL, osWaitForever);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <StartSemGestionTask+0x24>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	f107 010f 	add.w	r1, r7, #15
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f002 ffa1 	bl	8003c70 <osMessageQueueGet>
		stateSemaforo(rxChar);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f843 	bl	8000dbc <stateSemaforo>
		osMessageQueueGet(semaforoHandle, &rxChar, NULL, osWaitForever);
 8000d36:	e7f1      	b.n	8000d1c <StartSemGestionTask+0x8>
 8000d38:	200000a8 	.word	0x200000a8

08000d3c <StartSirenaTask>:
 * se activa o se desactivan desde la tarea semGestionTask con
 * el flag del evento semEventHandle.
 *
 */
/* USER CODE END Header_StartSirenaTask */
void StartSirenaTask(void *argument) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	desactivarFagSemaforo();
 8000d44:	f7ff fde6 	bl	8000914 <desactivarFagSemaforo>
	for (;;) {
		osEventFlagsWait(semEventHandle, FLAG_EVENTO_SIRENA, osFlagsWaitAny, osWaitForever);
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <StartSirenaTask+0x44>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	f002 fd44 	bl	80037e0 <osEventFlagsWait>
		is_sirena = 1;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <StartSirenaTask+0x48>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
		sendUARTMensaje(SIRENA_START);
 8000d5e:	2049      	movs	r0, #73	; 0x49
 8000d60:	f7ff fd12 	bl	8000788 <sendUARTMensaje>
		while (is_sirena) {
 8000d64:	e001      	b.n	8000d6a <StartSirenaTask+0x2e>
			runSirena();
 8000d66:	f000 f917 	bl	8000f98 <runSirena>
		while (is_sirena) {
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <StartSirenaTask+0x48>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d1f9      	bne.n	8000d66 <StartSirenaTask+0x2a>
		}
		sendUARTMensaje(SIRENA_OFF);
 8000d72:	204a      	movs	r0, #74	; 0x4a
 8000d74:	f7ff fd08 	bl	8000788 <sendUARTMensaje>
		stopSirena();
 8000d78:	f000 f936 	bl	8000fe8 <stopSirena>
		osEventFlagsWait(semEventHandle, FLAG_EVENTO_SIRENA, osFlagsWaitAny, osWaitForever);
 8000d7c:	e7e4      	b.n	8000d48 <StartSirenaTask+0xc>
 8000d7e:	bf00      	nop
 8000d80:	200000b0 	.word	0x200000b0
 8000d84:	2000004d 	.word	0x2000004d

08000d88 <StartKeyboardTask>:
/* USER CODE BEGIN Header_StartKeyboardTask */
/**
 * Gestion estado del teclado.
 */
/* USER CODE END Header_StartKeyboardTask */
void StartKeyboardTask(void *argument) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	char rxChar;

	for (;;) {
		osMessageQueueGet(keysHandle, &rxChar, NULL, osWaitForever);
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <StartKeyboardTask+0x24>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	f107 010f 	add.w	r1, r7, #15
 8000d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f002 ff67 	bl	8003c70 <osMessageQueueGet>
		stateKeyBoard(rxChar);
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fb9d 	bl	80004e4 <stateKeyBoard>
		osMessageQueueGet(keysHandle, &rxChar, NULL, osWaitForever);
 8000daa:	e7f1      	b.n	8000d90 <StartKeyboardTask+0x8>
 8000dac:	200000a4 	.word	0x200000a4

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <stateSemaforo>:

/* Maquina de estado del ciclo SEMAFORO */

uint8_t semaforo_state = STATE_SEM_NORMAL;

void stateSemaforo(char rxCharacter) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]

	switch (rxCharacter) {
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	3b45      	subs	r3, #69	; 0x45
 8000dca:	2b0b      	cmp	r3, #11
 8000dcc:	d853      	bhi.n	8000e76 <stateSemaforo+0xba>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <stateSemaforo+0x18>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000e05 	.word	0x08000e05
 8000dd8:	08000e31 	.word	0x08000e31
 8000ddc:	08000e77 	.word	0x08000e77
 8000de0:	08000e49 	.word	0x08000e49
 8000de4:	08000e77 	.word	0x08000e77
 8000de8:	08000e77 	.word	0x08000e77
 8000dec:	08000e77 	.word	0x08000e77
 8000df0:	08000e77 	.word	0x08000e77
 8000df4:	08000e77 	.word	0x08000e77
 8000df8:	08000e77 	.word	0x08000e77
 8000dfc:	08000e77 	.word	0x08000e77
 8000e00:	08000e19 	.word	0x08000e19
	case BLOQUEO_AMB:
		if (semaforo_state == STATE_SEM_NORMAL) {
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <stateSemaforo+0xc4>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d12d      	bne.n	8000e68 <stateSemaforo+0xac>
			semaforo_state = STATE_SEM_NORMAL_BLOQUEO_AMB_NORMAL; // Set funcionamiento normal bloqueo ambulancia
 8000e0c:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <stateSemaforo+0xc4>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	701a      	strb	r2, [r3, #0]
			activarFagSemaforo(); // Activar flag evento sirena
 8000e12:	f7ff fd73 	bl	80008fc <activarFagSemaforo>
		}
		break;
 8000e16:	e027      	b.n	8000e68 <stateSemaforo+0xac>
	case PIR_AMB:
		if (semaforo_state == STATE_SEM_NORMAL_BLOQUEO_AMB_NORMAL) {
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <stateSemaforo+0xc4>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d125      	bne.n	8000e6c <stateSemaforo+0xb0>
			semaforo_state = STATE_SEM_BLOQUEO_AMB; // Set  bloqueo ambulancia
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <stateSemaforo+0xc4>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	701a      	strb	r2, [r3, #0]
			//activarFagSemaforo();
			suspenderTarea(); // Suspender tarea SemNormalTask
 8000e26:	f7ff fd87 	bl	8000938 <suspenderTarea>
			runSemaforoBloqueoAmbulancia(); // Ejecutar un ciclo de bloqueo ambulancia
 8000e2a:	f000 f841 	bl	8000eb0 <runSemaforoBloqueoAmbulancia>
		}
		break;
 8000e2e:	e01d      	b.n	8000e6c <stateSemaforo+0xb0>
	case BLOQUEO_TOTAL:
		if (semaforo_state == STATE_SEM_NORMAL) {
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <stateSemaforo+0xc4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d11b      	bne.n	8000e70 <stateSemaforo+0xb4>
			semaforo_state = STATE_SEM_BLOQUEO_TOTAL; // Set bloqueo total
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <stateSemaforo+0xc4>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	701a      	strb	r2, [r3, #0]
			suspenderTarea(); // Suspender tarea SemNormalTask
 8000e3e:	f7ff fd7b 	bl	8000938 <suspenderTarea>
			runSemaforoBloqueoTotal(); // Ejecutar un ciclo de bloqueo total
 8000e42:	f000 f842 	bl	8000eca <runSemaforoBloqueoTotal>
		}
		break;
 8000e46:	e013      	b.n	8000e70 <stateSemaforo+0xb4>
	case DESBLOQUEO:
		if ((semaforo_state == STATE_SEM_BLOQUEO_AMB)
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <stateSemaforo+0xc4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d003      	beq.n	8000e58 <stateSemaforo+0x9c>
				|| (semaforo_state == STATE_SEM_BLOQUEO_TOTAL)) {
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <stateSemaforo+0xc4>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b04      	cmp	r3, #4
 8000e56:	d10d      	bne.n	8000e74 <stateSemaforo+0xb8>
			semaforo_state = STATE_SEM_NORMAL; // Set funcionamiento normal
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <stateSemaforo+0xc4>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
			desactivarFagSemaforo(); // Desactivar flag evento sirena
 8000e5e:	f7ff fd59 	bl	8000914 <desactivarFagSemaforo>
			activarTarea(); // Activar tarea SemNormalTask
 8000e62:	f7ff fd75 	bl	8000950 <activarTarea>

		}
		break;
 8000e66:	e005      	b.n	8000e74 <stateSemaforo+0xb8>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e004      	b.n	8000e76 <stateSemaforo+0xba>
		break;
 8000e6c:	bf00      	nop
 8000e6e:	e002      	b.n	8000e76 <stateSemaforo+0xba>
		break;
 8000e70:	bf00      	nop
 8000e72:	e000      	b.n	8000e76 <stateSemaforo+0xba>
		break;
 8000e74:	bf00      	nop

	}

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000014 	.word	0x20000014

08000e84 <runSemaforoNormal>:


//Ciclo funcionamiento normal maquina
void runSemaforoNormal() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	setVerde();
 8000e88:	f000 f868 	bl	8000f5c <setVerde>
	osDelay(T_VERDE);
 8000e8c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e90:	f002 fbd6 	bl	8003640 <osDelay>
	setAmbar();
 8000e94:	f000 f844 	bl	8000f20 <setAmbar>
	osDelay(T_AMBAR);
 8000e98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e9c:	f002 fbd0 	bl	8003640 <osDelay>
	setRojo();
 8000ea0:	f000 f820 	bl	8000ee4 <setRojo>
	osDelay(T_ROJO);
 8000ea4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ea8:	f002 fbca 	bl	8003640 <osDelay>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <runSemaforoBloqueoAmbulancia>:

//Ciclo funcionamiento bloqueo ambulancia
void runSemaforoBloqueoAmbulancia() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	setRojo();
 8000eb4:	f000 f816 	bl	8000ee4 <setRojo>
	osDelay(T_AMBULANCIA);
 8000eb8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ebc:	f002 fbc0 	bl	8003640 <osDelay>
	sendUARTMensaje(BLOQUEO_ACK);
 8000ec0:	204b      	movs	r0, #75	; 0x4b
 8000ec2:	f7ff fc61 	bl	8000788 <sendUARTMensaje>
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <runSemaforoBloqueoTotal>:

//Ciclo funcionamiento bloqueo total
void runSemaforoBloqueoTotal() {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	af00      	add	r7, sp, #0
	setRojo();
 8000ece:	f000 f809 	bl	8000ee4 <setRojo>
	osDelay(T_TOTAL);
 8000ed2:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000ed6:	f002 fbb3 	bl	8003640 <osDelay>
	sendUARTMensaje(BLOQUEO_ACK);
 8000eda:	204b      	movs	r0, #75	; 0x4b
 8000edc:	f7ff fc54 	bl	8000788 <sendUARTMensaje>
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <setRojo>:


// Semaforo: estado rojo
void setRojo() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_SEM_R, PIN_SEM_R, GPIO_PIN_SET);	    // Rojo
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <setRojo+0x34>)
 8000ef0:	f000 fd38 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_SEM_Y, PIN_SEM_Y, GPIO_PIN_RESET);	// Ambar
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efa:	4808      	ldr	r0, [pc, #32]	; (8000f1c <setRojo+0x38>)
 8000efc:	f000 fd32 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_SEM_G, PIN_SEM_G, GPIO_PIN_RESET);	// Verde
 8000f00:	2200      	movs	r2, #0
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <setRojo+0x38>)
 8000f08:	f000 fd2c 	bl	8001964 <HAL_GPIO_WritePin>
	sendUARTMensaje(SEM_ROJO);
 8000f0c:	2052      	movs	r0, #82	; 0x52
 8000f0e:	f7ff fc3b 	bl	8000788 <sendUARTMensaje>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40020400 	.word	0x40020400
 8000f1c:	40020000 	.word	0x40020000

08000f20 <setAmbar>:

// Semaforo: estado amarillo
void setAmbar() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_SEM_R, PIN_SEM_R, GPIO_PIN_RESET);	// Rojo
 8000f24:	2200      	movs	r2, #0
 8000f26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f2a:	480a      	ldr	r0, [pc, #40]	; (8000f54 <setAmbar+0x34>)
 8000f2c:	f000 fd1a 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_SEM_Y, PIN_SEM_Y, GPIO_PIN_SET);		// Ambar
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <setAmbar+0x38>)
 8000f38:	f000 fd14 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_SEM_G, PIN_SEM_G, GPIO_PIN_RESET);	// Verde
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <setAmbar+0x38>)
 8000f44:	f000 fd0e 	bl	8001964 <HAL_GPIO_WritePin>
	sendUARTMensaje(SEM_AMBAR);
 8000f48:	2059      	movs	r0, #89	; 0x59
 8000f4a:	f7ff fc1d 	bl	8000788 <sendUARTMensaje>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40020400 	.word	0x40020400
 8000f58:	40020000 	.word	0x40020000

08000f5c <setVerde>:

// Semaforo: estado verde
void setVerde() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_SEM_R, PIN_SEM_R, GPIO_PIN_RESET);	// Rojo
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f66:	480a      	ldr	r0, [pc, #40]	; (8000f90 <setVerde+0x34>)
 8000f68:	f000 fcfc 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_SEM_Y, PIN_SEM_Y, GPIO_PIN_RESET);	// Ambar
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f72:	4808      	ldr	r0, [pc, #32]	; (8000f94 <setVerde+0x38>)
 8000f74:	f000 fcf6 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_SEM_G, PIN_SEM_G, GPIO_PIN_SET);		// Verde
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <setVerde+0x38>)
 8000f80:	f000 fcf0 	bl	8001964 <HAL_GPIO_WritePin>
	sendUARTMensaje(SEM_VERDE);
 8000f84:	2047      	movs	r0, #71	; 0x47
 8000f86:	f7ff fbff 	bl	8000788 <sendUARTMensaje>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020000 	.word	0x40020000

08000f98 <runSirena>:

/*******************************
 * 			SIRENA
********************************/

void runSirena() {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(REG_AMB_R, PIN_AMB_R) == GPIO_PIN_RESET)
 8000f9c:	2120      	movs	r1, #32
 8000f9e:	4810      	ldr	r0, [pc, #64]	; (8000fe0 <runSirena+0x48>)
 8000fa0:	f000 fcc8 	bl	8001934 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d10c      	bne.n	8000fc4 <runSirena+0x2c>
			&& (HAL_GPIO_ReadPin(REG_AMB_B, PIN_AMB_B) == GPIO_PIN_RESET)) {
 8000faa:	2108      	movs	r1, #8
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <runSirena+0x4c>)
 8000fae:	f000 fcc1 	bl	8001934 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <runSirena+0x2c>
		HAL_GPIO_WritePin(REG_AMB_R, PIN_AMB_R, GPIO_PIN_SET); //Sirena ambulancia Rojo
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <runSirena+0x48>)
 8000fbe:	f000 fcd1 	bl	8001964 <HAL_GPIO_WritePin>
 8000fc2:	e007      	b.n	8000fd4 <runSirena+0x3c>
	} else {
		HAL_GPIO_TogglePin(REG_AMB_R, PIN_AMB_R); //Sirena ambulancia  Rojo
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <runSirena+0x48>)
 8000fc8:	f000 fce5 	bl	8001996 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(REG_AMB_B, PIN_AMB_B); //Sirena ambulancia  Azul
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <runSirena+0x4c>)
 8000fd0:	f000 fce1 	bl	8001996 <HAL_GPIO_TogglePin>
	}
	osDelay(T_ONOFF);
 8000fd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fd8:	f002 fb32 	bl	8003640 <osDelay>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <stopSirena>:

void stopSirena() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REG_AMB_R, PIN_AMB_R, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2120      	movs	r1, #32
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <stopSirena+0x1c>)
 8000ff2:	f000 fcb7 	bl	8001964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REG_AMB_B, PIN_AMB_B, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <stopSirena+0x20>)
 8000ffc:	f000 fcb2 	bl	8001964 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_MspInit+0x54>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_MspInit+0x54>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <HAL_MspInit+0x54>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <HAL_MspInit+0x54>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_MspInit+0x54>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_MspInit+0x54>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	210f      	movs	r1, #15
 800104e:	f06f 0001 	mvn.w	r0, #1
 8001052:	f000 fa22 	bl	800149a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <HAL_UART_MspInit+0x94>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d133      	bne.n	80010ee <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <HAL_UART_MspInit+0x98>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <HAL_UART_MspInit+0x98>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_UART_MspInit+0x98>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b15      	ldr	r3, [pc, #84]	; (80010fc <HAL_UART_MspInit+0x98>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a14      	ldr	r2, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x98>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_UART_MspInit+0x98>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010be:	230c      	movs	r3, #12
 80010c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ce:	2307      	movs	r3, #7
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4809      	ldr	r0, [pc, #36]	; (8001100 <HAL_UART_MspInit+0x9c>)
 80010da:	f000 faa7 	bl	800162c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2105      	movs	r1, #5
 80010e2:	2026      	movs	r0, #38	; 0x26
 80010e4:	f000 f9d9 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010e8:	2026      	movs	r0, #38	; 0x26
 80010ea:	f000 f9f2 	bl	80014d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40004400 	.word	0x40004400
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020000 	.word	0x40020000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001134:	f000 f8b6 	bl	80012a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001138:	f005 f89e 	bl	8006278 <xTaskGetSchedulerState>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d001      	beq.n	8001146 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001142:	f005 ffb9 	bl	80070b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800114e:	2020      	movs	r0, #32
 8001150:	f000 fc3c 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001154:	2040      	movs	r0, #64	; 0x40
 8001156:	f000 fc39 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800115a:	2080      	movs	r0, #128	; 0x80
 800115c:	f000 fc36 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001160:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001164:	f000 fc32 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001168:	f44f 7000 	mov.w	r0, #512	; 0x200
 800116c:	f000 fc2e 	bl	80019cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <USART2_IRQHandler+0x10>)
 800117a:	f001 f9a7 	bl	80024cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000050 	.word	0x20000050

08001188 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d6:	f7ff ffd7 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f006 f9e7 	bl	80075ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fc2f 	bl	8000a40 <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80011f0:	080077cc 	.word	0x080077cc
  ldr r2, =_sbss
 80011f4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80011f8:	20004a08 	.word	0x20004a08

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <HAL_Init+0x40>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <HAL_Init+0x40>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800120e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_Init+0x40>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_Init+0x40>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <HAL_Init+0x40>)
 8001222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001228:	2003      	movs	r0, #3
 800122a:	f000 f92b 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800122e:	200f      	movs	r0, #15
 8001230:	f000 f808 	bl	8001244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001234:	f7ff feea 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023c00 	.word	0x40023c00

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <HAL_InitTick+0x54>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x58>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4619      	mov	r1, r3
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	fbb3 f3f1 	udiv	r3, r3, r1
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f943 	bl	80014ee <HAL_SYSTICK_Config>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00e      	b.n	8001290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b0f      	cmp	r3, #15
 8001276:	d80a      	bhi.n	800128e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001280:	f000 f90b 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_InitTick+0x5c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000018 	.word	0x20000018
 800129c:	20000020 	.word	0x20000020
 80012a0:	2000001c 	.word	0x2000001c

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000020 	.word	0x20000020
 80012c8:	200000b4 	.word	0x200000b4

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	200000b4 	.word	0x200000b4

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff feda 	bl	80012cc <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e052      	b.n	80015de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0216 	bic.w	r2, r2, #22
 8001546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001556:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <HAL_DMA_Abort+0x62>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0208 	bic.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001588:	e013      	b.n	80015b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158a:	f7ff fe9f 	bl	80012cc <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b05      	cmp	r3, #5
 8001596:	d90c      	bls.n	80015b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e015      	b.n	80015de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e4      	bne.n	800158a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	223f      	movs	r2, #63	; 0x3f
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e00c      	b.n	800161e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2205      	movs	r2, #5
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e159      	b.n	80018fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 8148 	bne.w	80018f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0201 	and.w	r2, r3, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d017      	beq.n	800171c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a2 	beq.w	80018f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b57      	ldr	r3, [pc, #348]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a56      	ldr	r2, [pc, #344]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b54      	ldr	r3, [pc, #336]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a49      	ldr	r2, [pc, #292]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x202>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a48      	ldr	r2, [pc, #288]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x1fe>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a47      	ldr	r2, [pc, #284]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x1fa>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_GPIO_Init+0x2fc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x1f6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a45      	ldr	r2, [pc, #276]	; (800192c <HAL_GPIO_Init+0x300>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x1f2>
 800181a:	2304      	movs	r3, #4
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x204>
 800181e:	2307      	movs	r3, #7
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x204>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x204>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x204>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x204>
 800182e:	2300      	movs	r3, #0
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_GPIO_Init+0x304>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_GPIO_Init+0x304>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c6:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	f67f aea2 	bls.w	8001648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	460b      	mov	r3, r1
 80019a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a8:	887a      	ldrh	r2, [r7, #2]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4013      	ands	r3, r2
 80019ae:	041a      	lsls	r2, r3, #16
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	887b      	ldrh	r3, [r7, #2]
 80019b6:	400b      	ands	r3, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe ff10 	bl	8000810 <HAL_GPIO_EXTI_Callback>
  }
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40013c00 	.word	0x40013c00

080019fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e267      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d075      	beq.n	8001b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d00c      	beq.n	8001a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a26:	4b85      	ldr	r3, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d112      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a32:	4b82      	ldr	r3, [pc, #520]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a3e:	d10b      	bne.n	8001a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	4b7e      	ldr	r3, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d05b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x108>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d157      	bne.n	8001b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e242      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a60:	d106      	bne.n	8001a70 <HAL_RCC_OscConfig+0x74>
 8001a62:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a75      	ldr	r2, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e01d      	b.n	8001aac <HAL_RCC_OscConfig+0xb0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a78:	d10c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x98>
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b6d      	ldr	r3, [pc, #436]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a6c      	ldr	r2, [pc, #432]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0xb0>
 8001a94:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a68      	ldr	r2, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc0a 	bl	80012cc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fc06 	bl	80012cc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e207      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	4b5b      	ldr	r3, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xc0>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff fbf6 	bl	80012cc <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fbf2 	bl	80012cc <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e1f3      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xe8>
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d063      	beq.n	8001bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b44      	ldr	r3, [pc, #272]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x152>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1c7      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <HAL_RCC_OscConfig+0x244>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff fbab 	bl	80012cc <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fba7 	bl	80012cc <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1a8      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4925      	ldr	r1, [pc, #148]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <HAL_RCC_OscConfig+0x244>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff fb8a 	bl	80012cc <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fb86 	bl	80012cc <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e187      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d036      	beq.n	8001c54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d016      	beq.n	8001c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_RCC_OscConfig+0x248>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fb6a 	bl	80012cc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fb66 	bl	80012cc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e167      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x240>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x200>
 8001c1a:	e01b      	b.n	8001c54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_OscConfig+0x248>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c22:	f7ff fb53 	bl	80012cc <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	e00e      	b.n	8001c48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff fb4f 	bl	80012cc <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d907      	bls.n	8001c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e150      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	42470000 	.word	0x42470000
 8001c44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ea      	bne.n	8001c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8097 	beq.w	8001d90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b7d      	ldr	r3, [pc, #500]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a7c      	ldr	r2, [pc, #496]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b7a      	ldr	r3, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b74      	ldr	r3, [pc, #464]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a73      	ldr	r2, [pc, #460]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff fb0f 	bl	80012cc <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff fb0b 	bl	80012cc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e10c      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x474>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x2ea>
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x324>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x30c>
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a5e      	ldr	r2, [pc, #376]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a5b      	ldr	r2, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x324>
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a54      	ldr	r2, [pc, #336]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7ff fad0 	bl	80012cc <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7ff facc 	bl	80012cc <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0cb      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ee      	beq.n	8001d30 <HAL_RCC_OscConfig+0x334>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff faba 	bl	80012cc <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fab6 	bl	80012cc <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0b5      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a1 	beq.w	8001edc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d05c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d141      	bne.n	8001e32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fa8a 	bl	80012cc <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff fa86 	bl	80012cc <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e087      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	3b01      	subs	r3, #1
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	491b      	ldr	r1, [pc, #108]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fa5f 	bl	80012cc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff fa5b 	bl	80012cc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e05c      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x416>
 8001e30:	e054      	b.n	8001edc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_RCC_OscConfig+0x478>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fa48 	bl	80012cc <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7ff fa44 	bl	80012cc <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e045      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x470>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0x444>
 8001e5e:	e03d      	b.n	8001edc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e038      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x4ec>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d028      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d121      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0cc      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b68      	ldr	r3, [pc, #416]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d90c      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b65      	ldr	r3, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d119      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	4b3f      	ldr	r3, [pc, #252]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e067      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f023 0203 	bic.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4934      	ldr	r1, [pc, #208]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f976 	bl	80012cc <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7ff f972 	bl	80012cc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04f      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 020c 	and.w	r2, r3, #12
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1eb      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20c      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f8d6 	bl	8001244 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40023c00 	.word	0x40023c00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	080077a4 	.word	0x080077a4
 80020b0:	20000018 	.word	0x20000018
 80020b4:	2000001c 	.word	0x2000001c

080020b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020bc:	b090      	sub	sp, #64	; 0x40
 80020be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	637b      	str	r3, [r7, #52]	; 0x34
 80020c4:	2300      	movs	r3, #0
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c8:	2300      	movs	r3, #0
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d0:	4b59      	ldr	r3, [pc, #356]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d00d      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x40>
 80020dc:	2b08      	cmp	r3, #8
 80020de:	f200 80a1 	bhi.w	8002224 <HAL_RCC_GetSysClockFreq+0x16c>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x34>
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ea:	e09b      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020ec:	4b53      	ldr	r3, [pc, #332]	; (800223c <HAL_RCC_GetSysClockFreq+0x184>)
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020f0:	e09b      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f2:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020f6:	e098      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f8:	4b4f      	ldr	r3, [pc, #316]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002102:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d028      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	623b      	str	r3, [r7, #32]
 8002118:	627a      	str	r2, [r7, #36]	; 0x24
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002120:	2100      	movs	r1, #0
 8002122:	4b47      	ldr	r3, [pc, #284]	; (8002240 <HAL_RCC_GetSysClockFreq+0x188>)
 8002124:	fb03 f201 	mul.w	r2, r3, r1
 8002128:	2300      	movs	r3, #0
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	4413      	add	r3, r2
 8002130:	4a43      	ldr	r2, [pc, #268]	; (8002240 <HAL_RCC_GetSysClockFreq+0x188>)
 8002132:	fba0 1202 	umull	r1, r2, r0, r2
 8002136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002138:	460a      	mov	r2, r1
 800213a:	62ba      	str	r2, [r7, #40]	; 0x28
 800213c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213e:	4413      	add	r3, r2
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	2200      	movs	r2, #0
 8002146:	61bb      	str	r3, [r7, #24]
 8002148:	61fa      	str	r2, [r7, #28]
 800214a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800214e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002152:	f7fe f845 	bl	80001e0 <__aeabi_uldivmod>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4613      	mov	r3, r2
 800215c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215e:	e053      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002160:	4b35      	ldr	r3, [pc, #212]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	2200      	movs	r2, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	617a      	str	r2, [r7, #20]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002172:	f04f 0b00 	mov.w	fp, #0
 8002176:	4652      	mov	r2, sl
 8002178:	465b      	mov	r3, fp
 800217a:	f04f 0000 	mov.w	r0, #0
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	0159      	lsls	r1, r3, #5
 8002184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002188:	0150      	lsls	r0, r2, #5
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ebb2 080a 	subs.w	r8, r2, sl
 8002192:	eb63 090b 	sbc.w	r9, r3, fp
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021aa:	ebb2 0408 	subs.w	r4, r2, r8
 80021ae:	eb63 0509 	sbc.w	r5, r3, r9
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	00eb      	lsls	r3, r5, #3
 80021bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c0:	00e2      	lsls	r2, r4, #3
 80021c2:	4614      	mov	r4, r2
 80021c4:	461d      	mov	r5, r3
 80021c6:	eb14 030a 	adds.w	r3, r4, sl
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	eb45 030b 	adc.w	r3, r5, fp
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021de:	4629      	mov	r1, r5
 80021e0:	028b      	lsls	r3, r1, #10
 80021e2:	4621      	mov	r1, r4
 80021e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021e8:	4621      	mov	r1, r4
 80021ea:	028a      	lsls	r2, r1, #10
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f2:	2200      	movs	r2, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	60fa      	str	r2, [r7, #12]
 80021f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021fc:	f7fd fff0 	bl	80001e0 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4613      	mov	r3, r2
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_GetSysClockFreq+0x180>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	0c1b      	lsrs	r3, r3, #16
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	3301      	adds	r3, #1
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002222:	e002      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <HAL_RCC_GetSysClockFreq+0x184>)
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002228:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800222c:	4618      	mov	r0, r3
 800222e:	3740      	adds	r7, #64	; 0x40
 8002230:	46bd      	mov	sp, r7
 8002232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	017d7840 	.word	0x017d7840

08002244 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_RCC_GetHCLKFreq+0x14>)
 800224a:	681b      	ldr	r3, [r3, #0]
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	20000018 	.word	0x20000018

0800225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002260:	f7ff fff0 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0a9b      	lsrs	r3, r3, #10
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4903      	ldr	r1, [pc, #12]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	080077b4 	.word	0x080077b4

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff ffdc 	bl	8002244 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0b5b      	lsrs	r3, r3, #13
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	080077b4 	.word	0x080077b4

080022ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e03f      	b.n	800233e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fec6 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 fddf 	bl	8002eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b08a      	sub	sp, #40	; 0x28
 800234a:	af02      	add	r7, sp, #8
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4613      	mov	r3, r2
 8002354:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b20      	cmp	r3, #32
 8002364:	d17c      	bne.n	8002460 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <HAL_UART_Transmit+0x2c>
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e075      	b.n	8002462 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_UART_Transmit+0x3e>
 8002380:	2302      	movs	r3, #2
 8002382:	e06e      	b.n	8002462 <HAL_UART_Transmit+0x11c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2221      	movs	r2, #33	; 0x21
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800239a:	f7fe ff97 	bl	80012cc <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	88fa      	ldrh	r2, [r7, #6]
 80023a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	88fa      	ldrh	r2, [r7, #6]
 80023aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023b4:	d108      	bne.n	80023c8 <HAL_UART_Transmit+0x82>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d104      	bne.n	80023c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	e003      	b.n	80023d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023d8:	e02a      	b.n	8002430 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fb1f 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e036      	b.n	8002462 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10b      	bne.n	8002412 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002408:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3302      	adds	r3, #2
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e007      	b.n	8002422 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3301      	adds	r3, #1
 8002420:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1cf      	bne.n	80023da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	2140      	movs	r1, #64	; 0x40
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 faef 	bl	8002a28 <UART_WaitOnFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e006      	b.n	8002462 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	4613      	mov	r3, r2
 8002476:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	d11d      	bne.n	80024c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_UART_Receive_IT+0x26>
 800248a:	88fb      	ldrh	r3, [r7, #6]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e016      	b.n	80024c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Receive_IT+0x38>
 800249e:	2302      	movs	r3, #2
 80024a0:	e00f      	b.n	80024c2 <HAL_UART_Receive_IT+0x58>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 fb24 	bl	8002b04 <UART_Start_Receive_IT>
 80024bc:	4603      	mov	r3, r0
 80024be:	e000      	b.n	80024c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b0ba      	sub	sp, #232	; 0xe8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800250a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10f      	bne.n	8002532 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_UART_IRQHandler+0x66>
 800251e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002522:	f003 0320 	and.w	r3, r3, #32
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fc07 	bl	8002d3e <UART_Receive_IT>
      return;
 8002530:	e256      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80de 	beq.w	80026f8 <HAL_UART_IRQHandler+0x22c>
 800253c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800254c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80d1 	beq.w	80026f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_UART_IRQHandler+0xae>
 8002562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f043 0201 	orr.w	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800257a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_UART_IRQHandler+0xd2>
 8002586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_UART_IRQHandler+0xf6>
 80025aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f043 0204 	orr.w	r2, r3, #4
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d011      	beq.n	80025f2 <HAL_UART_IRQHandler+0x126>
 80025ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f043 0208 	orr.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 81ed 	beq.w	80029d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_UART_IRQHandler+0x14e>
 8002608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fb92 	bl	8002d3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	bf0c      	ite	eq
 8002628:	2301      	moveq	r3, #1
 800262a:	2300      	movne	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <HAL_UART_IRQHandler+0x17a>
 800263e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04f      	beq.n	80026e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fa9a 	bl	8002b80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002656:	2b40      	cmp	r3, #64	; 0x40
 8002658:	d141      	bne.n	80026de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002668:	e853 3f00 	ldrex	r3, [r3]
 800266c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3314      	adds	r3, #20
 8002682:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002686:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800268a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002692:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800269e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1d9      	bne.n	800265a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b2:	4a7d      	ldr	r2, [pc, #500]	; (80028a8 <HAL_UART_IRQHandler+0x3dc>)
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe ff93 	bl	80015e6 <HAL_DMA_Abort_IT>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d016      	beq.n	80026f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d0:	4610      	mov	r0, r2
 80026d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	e00e      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f990 	bl	80029fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	e00a      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f98c 	bl	80029fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e4:	e006      	b.n	80026f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f988 	bl	80029fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80026f2:	e170      	b.n	80029d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	bf00      	nop
    return;
 80026f6:	e16e      	b.n	80029d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	f040 814a 	bne.w	8002996 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002706:	f003 0310 	and.w	r3, r3, #16
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 8143 	beq.w	8002996 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 813c 	beq.w	8002996 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	f040 80b4 	bne.w	80028ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002750:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8140 	beq.w	80029da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800275e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002762:	429a      	cmp	r2, r3
 8002764:	f080 8139 	bcs.w	80029da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800276e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800277a:	f000 8088 	beq.w	800288e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002788:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002794:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800279c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1d9      	bne.n	800277e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3314      	adds	r3, #20
 80027d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	e853 3f00 	ldrex	r3, [r3]
 80027d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e1      	bne.n	80027ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800281c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800282a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800282c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002830:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002832:	e841 2300 	strex	r3, r2, [r1]
 8002836:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e3      	bne.n	8002806 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800285c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285e:	f023 0310 	bic.w	r3, r3, #16
 8002862:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	330c      	adds	r3, #12
 800286c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002870:	65ba      	str	r2, [r7, #88]	; 0x58
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002876:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800287e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e3      	bne.n	800284c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fe3c 	bl	8001506 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002896:	b29b      	uxth	r3, r3
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	4619      	mov	r1, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8b6 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028a4:	e099      	b.n	80029da <HAL_UART_IRQHandler+0x50e>
 80028a6:	bf00      	nop
 80028a8:	08002c47 	.word	0x08002c47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 808b 	beq.w	80029de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8086 	beq.w	80029de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	330c      	adds	r3, #12
 80028d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028dc:	e853 3f00 	ldrex	r3, [r3]
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028f6:	647a      	str	r2, [r7, #68]	; 0x44
 80028f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028fe:	e841 2300 	strex	r3, r2, [r1]
 8002902:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1e3      	bne.n	80028d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3314      	adds	r3, #20
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	e853 3f00 	ldrex	r3, [r3]
 8002918:	623b      	str	r3, [r7, #32]
   return(result);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800292e:	633a      	str	r2, [r7, #48]	; 0x30
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e3      	bne.n	800290a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2220      	movs	r2, #32
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	330c      	adds	r3, #12
 8002956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0310 	bic.w	r3, r3, #16
 8002966:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002974:	61fa      	str	r2, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	69b9      	ldr	r1, [r7, #24]
 800297a:	69fa      	ldr	r2, [r7, #28]
 800297c:	e841 2300 	strex	r3, r2, [r1]
 8002980:	617b      	str	r3, [r7, #20]
   return(result);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1e3      	bne.n	8002950 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f83e 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002994:	e023      	b.n	80029de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_UART_IRQHandler+0x4ea>
 80029a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f95d 	bl	8002c6e <UART_Transmit_IT>
    return;
 80029b4:	e014      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <HAL_UART_IRQHandler+0x514>
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d008      	beq.n	80029e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f99d 	bl	8002d0e <UART_EndTransmit_IT>
    return;
 80029d4:	e004      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
    return;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
      return;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <HAL_UART_IRQHandler+0x514>
      return;
 80029de:	bf00      	nop
  }
}
 80029e0:	37e8      	adds	r7, #232	; 0xe8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop

080029e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b090      	sub	sp, #64	; 0x40
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	603b      	str	r3, [r7, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a38:	e050      	b.n	8002adc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a40:	d04c      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a48:	f7fe fc40 	bl	80012cc <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d241      	bcs.n	8002adc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a62:	e853 3f00 	ldrex	r3, [r3]
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a78:	637a      	str	r2, [r7, #52]	; 0x34
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a80:	e841 2300 	strex	r3, r2, [r1]
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1e5      	bne.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	e853 3f00 	ldrex	r3, [r3]
 8002a9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aac:	623a      	str	r2, [r7, #32]
 8002aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab0:	69f9      	ldr	r1, [r7, #28]
 8002ab2:	6a3a      	ldr	r2, [r7, #32]
 8002ab4:	e841 2300 	strex	r3, r2, [r1]
 8002ab8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1e5      	bne.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e00f      	b.n	8002afc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d09f      	beq.n	8002a3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3740      	adds	r7, #64	; 0x40
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	88fa      	ldrh	r2, [r7, #6]
 8002b22:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2222      	movs	r2, #34	; 0x22
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d007      	beq.n	8002b52 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b50:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 0201 	orr.w	r2, r2, #1
 8002b60:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f042 0220 	orr.w	r2, r2, #32
 8002b70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b095      	sub	sp, #84	; 0x54
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ba8:	643a      	str	r2, [r7, #64]	; 0x40
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bb0:	e841 2300 	strex	r3, r2, [r1]
 8002bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e5      	bne.n	8002b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3314      	adds	r3, #20
 8002bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d119      	bne.n	8002c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	e853 3f00 	ldrex	r3, [r3]
 8002c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f023 0310 	bic.w	r3, r3, #16
 8002c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c18:	61ba      	str	r2, [r7, #24]
 8002c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1c:	6979      	ldr	r1, [r7, #20]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	e841 2300 	strex	r3, r2, [r1]
 8002c24:	613b      	str	r3, [r7, #16]
   return(result);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e5      	bne.n	8002bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c3a:	bf00      	nop
 8002c3c:	3754      	adds	r7, #84	; 0x54
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f7ff fecb 	bl	80029fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b21      	cmp	r3, #33	; 0x21
 8002c80:	d13e      	bne.n	8002d00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8a:	d114      	bne.n	8002cb6 <UART_Transmit_IT+0x48>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d110      	bne.n	8002cb6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	1c9a      	adds	r2, r3, #2
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	621a      	str	r2, [r3, #32]
 8002cb4:	e008      	b.n	8002cc8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6211      	str	r1, [r2, #32]
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10f      	bne.n	8002cfc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cfa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff fe5a 	bl	80029e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b08c      	sub	sp, #48	; 0x30
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b22      	cmp	r3, #34	; 0x22
 8002d50:	f040 80ab 	bne.w	8002eaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	d117      	bne.n	8002d8e <UART_Receive_IT+0x50>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d113      	bne.n	8002d8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	1c9a      	adds	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002d8c:	e026      	b.n	8002ddc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da0:	d007      	beq.n	8002db2 <UART_Receive_IT+0x74>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <UART_Receive_IT+0x82>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e008      	b.n	8002dd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d15a      	bne.n	8002ea6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0220 	bic.w	r2, r2, #32
 8002dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d135      	bne.n	8002e9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	613b      	str	r3, [r7, #16]
   return(result);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f023 0310 	bic.w	r3, r3, #16
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	623a      	str	r2, [r7, #32]
 8002e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	69f9      	ldr	r1, [r7, #28]
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e5      	bne.n	8002e36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d10a      	bne.n	8002e8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fdbb 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
 8002e9a:	e002      	b.n	8002ea2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7fd fc93 	bl	80007c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e002      	b.n	8002eac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3730      	adds	r7, #48	; 0x30
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb8:	b0c0      	sub	sp, #256	; 0x100
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed0:	68d9      	ldr	r1, [r3, #12]
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	ea40 0301 	orr.w	r3, r0, r1
 8002edc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f0c:	f021 010c 	bic.w	r1, r1, #12
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f1a:	430b      	orrs	r3, r1
 8002f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2e:	6999      	ldr	r1, [r3, #24]
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	ea40 0301 	orr.w	r3, r0, r1
 8002f3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <UART_SetConfig+0x2cc>)
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d005      	beq.n	8002f54 <UART_SetConfig+0xa0>
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <UART_SetConfig+0x2d0>)
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d104      	bne.n	8002f5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f54:	f7ff f996 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8002f58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f5c:	e003      	b.n	8002f66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5e:	f7ff f97d 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8002f62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f70:	f040 810c 	bne.w	800318c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	1891      	adds	r1, r2, r2
 8002f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f96:	4621      	mov	r1, r4
 8002f98:	eb12 0801 	adds.w	r8, r2, r1
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	eb43 0901 	adc.w	r9, r3, r1
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	4699      	mov	r9, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	eb18 0303 	adds.w	r3, r8, r3
 8002fc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	eb49 0303 	adc.w	r3, r9, r3
 8002fca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	18db      	adds	r3, r3, r3
 8002fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe8:	4613      	mov	r3, r2
 8002fea:	eb42 0303 	adc.w	r3, r2, r3
 8002fee:	657b      	str	r3, [r7, #84]	; 0x54
 8002ff0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ff8:	f7fd f8f2 	bl	80001e0 <__aeabi_uldivmod>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4b61      	ldr	r3, [pc, #388]	; (8003188 <UART_SetConfig+0x2d4>)
 8003002:	fba3 2302 	umull	r2, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	011c      	lsls	r4, r3, #4
 800300a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003014:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	1891      	adds	r1, r2, r2
 8003022:	64b9      	str	r1, [r7, #72]	; 0x48
 8003024:	415b      	adcs	r3, r3
 8003026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800302c:	4641      	mov	r1, r8
 800302e:	eb12 0a01 	adds.w	sl, r2, r1
 8003032:	4649      	mov	r1, r9
 8003034:	eb43 0b01 	adc.w	fp, r3, r1
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003044:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003048:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800304c:	4692      	mov	sl, r2
 800304e:	469b      	mov	fp, r3
 8003050:	4643      	mov	r3, r8
 8003052:	eb1a 0303 	adds.w	r3, sl, r3
 8003056:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800305a:	464b      	mov	r3, r9
 800305c:	eb4b 0303 	adc.w	r3, fp, r3
 8003060:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003070:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003074:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003078:	460b      	mov	r3, r1
 800307a:	18db      	adds	r3, r3, r3
 800307c:	643b      	str	r3, [r7, #64]	; 0x40
 800307e:	4613      	mov	r3, r2
 8003080:	eb42 0303 	adc.w	r3, r2, r3
 8003084:	647b      	str	r3, [r7, #68]	; 0x44
 8003086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800308a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800308e:	f7fd f8a7 	bl	80001e0 <__aeabi_uldivmod>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4611      	mov	r1, r2
 8003098:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <UART_SetConfig+0x2d4>)
 800309a:	fba3 2301 	umull	r2, r3, r3, r1
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2264      	movs	r2, #100	; 0x64
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	1acb      	subs	r3, r1, r3
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030ae:	4b36      	ldr	r3, [pc, #216]	; (8003188 <UART_SetConfig+0x2d4>)
 80030b0:	fba3 2302 	umull	r2, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030bc:	441c      	add	r4, r3
 80030be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030d0:	4642      	mov	r2, r8
 80030d2:	464b      	mov	r3, r9
 80030d4:	1891      	adds	r1, r2, r2
 80030d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d8:	415b      	adcs	r3, r3
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030e0:	4641      	mov	r1, r8
 80030e2:	1851      	adds	r1, r2, r1
 80030e4:	6339      	str	r1, [r7, #48]	; 0x30
 80030e6:	4649      	mov	r1, r9
 80030e8:	414b      	adcs	r3, r1
 80030ea:	637b      	str	r3, [r7, #52]	; 0x34
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f8:	4659      	mov	r1, fp
 80030fa:	00cb      	lsls	r3, r1, #3
 80030fc:	4651      	mov	r1, sl
 80030fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003102:	4651      	mov	r1, sl
 8003104:	00ca      	lsls	r2, r1, #3
 8003106:	4610      	mov	r0, r2
 8003108:	4619      	mov	r1, r3
 800310a:	4603      	mov	r3, r0
 800310c:	4642      	mov	r2, r8
 800310e:	189b      	adds	r3, r3, r2
 8003110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003114:	464b      	mov	r3, r9
 8003116:	460a      	mov	r2, r1
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800312c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003130:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003134:	460b      	mov	r3, r1
 8003136:	18db      	adds	r3, r3, r3
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
 800313a:	4613      	mov	r3, r2
 800313c:	eb42 0303 	adc.w	r3, r2, r3
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003146:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800314a:	f7fd f849 	bl	80001e0 <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <UART_SetConfig+0x2d4>)
 8003154:	fba3 1302 	umull	r1, r3, r3, r2
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	2164      	movs	r1, #100	; 0x64
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	3332      	adds	r3, #50	; 0x32
 8003166:	4a08      	ldr	r2, [pc, #32]	; (8003188 <UART_SetConfig+0x2d4>)
 8003168:	fba2 2303 	umull	r2, r3, r2, r3
 800316c:	095b      	lsrs	r3, r3, #5
 800316e:	f003 0207 	and.w	r2, r3, #7
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4422      	add	r2, r4
 800317a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800317c:	e105      	b.n	800338a <UART_SetConfig+0x4d6>
 800317e:	bf00      	nop
 8003180:	40011000 	.word	0x40011000
 8003184:	40011400 	.word	0x40011400
 8003188:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800318c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003196:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800319a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800319e:	4642      	mov	r2, r8
 80031a0:	464b      	mov	r3, r9
 80031a2:	1891      	adds	r1, r2, r2
 80031a4:	6239      	str	r1, [r7, #32]
 80031a6:	415b      	adcs	r3, r3
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
 80031aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ae:	4641      	mov	r1, r8
 80031b0:	1854      	adds	r4, r2, r1
 80031b2:	4649      	mov	r1, r9
 80031b4:	eb43 0501 	adc.w	r5, r3, r1
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	00eb      	lsls	r3, r5, #3
 80031c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c6:	00e2      	lsls	r2, r4, #3
 80031c8:	4614      	mov	r4, r2
 80031ca:	461d      	mov	r5, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	18e3      	adds	r3, r4, r3
 80031d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d4:	464b      	mov	r3, r9
 80031d6:	eb45 0303 	adc.w	r3, r5, r3
 80031da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031fa:	4629      	mov	r1, r5
 80031fc:	008b      	lsls	r3, r1, #2
 80031fe:	4621      	mov	r1, r4
 8003200:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003204:	4621      	mov	r1, r4
 8003206:	008a      	lsls	r2, r1, #2
 8003208:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800320c:	f7fc ffe8 	bl	80001e0 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4b60      	ldr	r3, [pc, #384]	; (8003398 <UART_SetConfig+0x4e4>)
 8003216:	fba3 2302 	umull	r2, r3, r3, r2
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	011c      	lsls	r4, r3, #4
 800321e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003222:	2200      	movs	r2, #0
 8003224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800322c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003230:	4642      	mov	r2, r8
 8003232:	464b      	mov	r3, r9
 8003234:	1891      	adds	r1, r2, r2
 8003236:	61b9      	str	r1, [r7, #24]
 8003238:	415b      	adcs	r3, r3
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003240:	4641      	mov	r1, r8
 8003242:	1851      	adds	r1, r2, r1
 8003244:	6139      	str	r1, [r7, #16]
 8003246:	4649      	mov	r1, r9
 8003248:	414b      	adcs	r3, r1
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003258:	4659      	mov	r1, fp
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003262:	4651      	mov	r1, sl
 8003264:	00ca      	lsls	r2, r1, #3
 8003266:	4610      	mov	r0, r2
 8003268:	4619      	mov	r1, r3
 800326a:	4603      	mov	r3, r0
 800326c:	4642      	mov	r2, r8
 800326e:	189b      	adds	r3, r3, r2
 8003270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003274:	464b      	mov	r3, r9
 8003276:	460a      	mov	r2, r1
 8003278:	eb42 0303 	adc.w	r3, r2, r3
 800327c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	67bb      	str	r3, [r7, #120]	; 0x78
 800328a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003298:	4649      	mov	r1, r9
 800329a:	008b      	lsls	r3, r1, #2
 800329c:	4641      	mov	r1, r8
 800329e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a2:	4641      	mov	r1, r8
 80032a4:	008a      	lsls	r2, r1, #2
 80032a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032aa:	f7fc ff99 	bl	80001e0 <__aeabi_uldivmod>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4b39      	ldr	r3, [pc, #228]	; (8003398 <UART_SetConfig+0x4e4>)
 80032b4:	fba3 1302 	umull	r1, r3, r3, r2
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	2164      	movs	r1, #100	; 0x64
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	3332      	adds	r3, #50	; 0x32
 80032c6:	4a34      	ldr	r2, [pc, #208]	; (8003398 <UART_SetConfig+0x4e4>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d2:	441c      	add	r4, r3
 80032d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d8:	2200      	movs	r2, #0
 80032da:	673b      	str	r3, [r7, #112]	; 0x70
 80032dc:	677a      	str	r2, [r7, #116]	; 0x74
 80032de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032e2:	4642      	mov	r2, r8
 80032e4:	464b      	mov	r3, r9
 80032e6:	1891      	adds	r1, r2, r2
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f2:	4641      	mov	r1, r8
 80032f4:	1851      	adds	r1, r2, r1
 80032f6:	6039      	str	r1, [r7, #0]
 80032f8:	4649      	mov	r1, r9
 80032fa:	414b      	adcs	r3, r1
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	f04f 0200 	mov.w	r2, #0
 8003302:	f04f 0300 	mov.w	r3, #0
 8003306:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800330a:	4659      	mov	r1, fp
 800330c:	00cb      	lsls	r3, r1, #3
 800330e:	4651      	mov	r1, sl
 8003310:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003314:	4651      	mov	r1, sl
 8003316:	00ca      	lsls	r2, r1, #3
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	4603      	mov	r3, r0
 800331e:	4642      	mov	r2, r8
 8003320:	189b      	adds	r3, r3, r2
 8003322:	66bb      	str	r3, [r7, #104]	; 0x68
 8003324:	464b      	mov	r3, r9
 8003326:	460a      	mov	r2, r1
 8003328:	eb42 0303 	adc.w	r3, r2, r3
 800332c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800332e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	663b      	str	r3, [r7, #96]	; 0x60
 8003338:	667a      	str	r2, [r7, #100]	; 0x64
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003346:	4649      	mov	r1, r9
 8003348:	008b      	lsls	r3, r1, #2
 800334a:	4641      	mov	r1, r8
 800334c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003350:	4641      	mov	r1, r8
 8003352:	008a      	lsls	r2, r1, #2
 8003354:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003358:	f7fc ff42 	bl	80001e0 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <UART_SetConfig+0x4e4>)
 8003362:	fba3 1302 	umull	r1, r3, r3, r2
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	2164      	movs	r1, #100	; 0x64
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	3332      	adds	r3, #50	; 0x32
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <UART_SetConfig+0x4e4>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	f003 020f 	and.w	r2, r3, #15
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4422      	add	r2, r4
 8003388:	609a      	str	r2, [r3, #8]
}
 800338a:	bf00      	nop
 800338c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003390:	46bd      	mov	sp, r7
 8003392:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003396:	bf00      	nop
 8003398:	51eb851f 	.word	0x51eb851f

0800339c <__NVIC_SetPriority>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80033f4:	2100      	movs	r1, #0
 80033f6:	f06f 0004 	mvn.w	r0, #4
 80033fa:	f7ff ffcf 	bl	800339c <__NVIC_SetPriority>
#endif
}
 80033fe:	bf00      	nop
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800340a:	f3ef 8305 	mrs	r3, IPSR
 800340e:	603b      	str	r3, [r7, #0]
  return(result);
 8003410:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003416:	f06f 0305 	mvn.w	r3, #5
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	e00c      	b.n	8003438 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <osKernelInitialize+0x44>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d105      	bne.n	8003432 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003426:	4b08      	ldr	r3, [pc, #32]	; (8003448 <osKernelInitialize+0x44>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800342c:	2300      	movs	r3, #0
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	e002      	b.n	8003438 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003436:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003438:	687b      	ldr	r3, [r7, #4]
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	200000b8 	.word	0x200000b8

0800344c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003452:	f3ef 8305 	mrs	r3, IPSR
 8003456:	603b      	str	r3, [r7, #0]
  return(result);
 8003458:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <osKernelStart+0x1a>
    stat = osErrorISR;
 800345e:	f06f 0305 	mvn.w	r3, #5
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	e010      	b.n	8003488 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <osKernelStart+0x48>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d109      	bne.n	8003482 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800346e:	f7ff ffbf 	bl	80033f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <osKernelStart+0x48>)
 8003474:	2202      	movs	r2, #2
 8003476:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003478:	f002 fa08 	bl	800588c <vTaskStartScheduler>
      stat = osOK;
 800347c:	2300      	movs	r3, #0
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	e002      	b.n	8003488 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003486:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003488:	687b      	ldr	r3, [r7, #4]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200000b8 	.word	0x200000b8

08003498 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b08e      	sub	sp, #56	; 0x38
 800349c:	af04      	add	r7, sp, #16
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a8:	f3ef 8305 	mrs	r3, IPSR
 80034ac:	617b      	str	r3, [r7, #20]
  return(result);
 80034ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d17e      	bne.n	80035b2 <osThreadNew+0x11a>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d07b      	beq.n	80035b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80034ba:	2380      	movs	r3, #128	; 0x80
 80034bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80034be:	2318      	movs	r3, #24
 80034c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80034c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d045      	beq.n	800355e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <osThreadNew+0x48>
        name = attr->name;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <osThreadNew+0x6e>
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b38      	cmp	r3, #56	; 0x38
 80034f8:	d805      	bhi.n	8003506 <osThreadNew+0x6e>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <osThreadNew+0x72>
        return (NULL);
 8003506:	2300      	movs	r3, #0
 8003508:	e054      	b.n	80035b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	089b      	lsrs	r3, r3, #2
 8003518:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <osThreadNew+0xa8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b5b      	cmp	r3, #91	; 0x5b
 8003528:	d90a      	bls.n	8003540 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <osThreadNew+0xa8>
        mem = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	e010      	b.n	8003562 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10c      	bne.n	8003562 <osThreadNew+0xca>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d108      	bne.n	8003562 <osThreadNew+0xca>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <osThreadNew+0xca>
          mem = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	e001      	b.n	8003562 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d110      	bne.n	800358a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003570:	9202      	str	r2, [sp, #8]
 8003572:	9301      	str	r3, [sp, #4]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	6a3a      	ldr	r2, [r7, #32]
 800357c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f001 fea8 	bl	80052d4 <xTaskCreateStatic>
 8003584:	4603      	mov	r3, r0
 8003586:	613b      	str	r3, [r7, #16]
 8003588:	e013      	b.n	80035b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d110      	bne.n	80035b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	b29a      	uxth	r2, r3
 8003594:	f107 0310 	add.w	r3, r7, #16
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f001 fef3 	bl	800538e <xTaskCreate>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d001      	beq.n	80035b2 <osThreadNew+0x11a>
            hTask = NULL;
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035b2:	693b      	ldr	r3, [r7, #16]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3728      	adds	r7, #40	; 0x28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035c8:	f3ef 8305 	mrs	r3, IPSR
 80035cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035ce:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <osThreadSuspend+0x20>
    stat = osErrorISR;
 80035d4:	f06f 0305 	mvn.w	r3, #5
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	e00b      	b.n	80035f4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80035e2:	f06f 0303 	mvn.w	r3, #3
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	e004      	b.n	80035f4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80035ee:	6938      	ldr	r0, [r7, #16]
 80035f0:	f002 f846 	bl	8005680 <vTaskSuspend>
  }

  return (stat);
 80035f4:	697b      	ldr	r3, [r7, #20]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80035fe:	b580      	push	{r7, lr}
 8003600:	b086      	sub	sp, #24
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800360a:	f3ef 8305 	mrs	r3, IPSR
 800360e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003610:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <osThreadResume+0x20>
    stat = osErrorISR;
 8003616:	f06f 0305 	mvn.w	r3, #5
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e00b      	b.n	8003636 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <osThreadResume+0x2e>
    stat = osErrorParameter;
 8003624:	f06f 0303 	mvn.w	r3, #3
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e004      	b.n	8003636 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8003630:	6938      	ldr	r0, [r7, #16]
 8003632:	f002 f8cd 	bl	80057d0 <vTaskResume>
  }

  return (stat);
 8003636:	697b      	ldr	r3, [r7, #20]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003648:	f3ef 8305 	mrs	r3, IPSR
 800364c:	60bb      	str	r3, [r7, #8]
  return(result);
 800364e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <osDelay+0x1c>
    stat = osErrorISR;
 8003654:	f06f 0305 	mvn.w	r3, #5
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e007      	b.n	800366c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800365c:	2300      	movs	r3, #0
 800365e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f001 ffd6 	bl	8005618 <vTaskDelay>
    }
  }

  return (stat);
 800366c:	68fb      	ldr	r3, [r7, #12]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003682:	f3ef 8305 	mrs	r3, IPSR
 8003686:	60fb      	str	r3, [r7, #12]
  return(result);
 8003688:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800368a:	2b00      	cmp	r3, #0
 800368c:	d12d      	bne.n	80036ea <osEventFlagsNew+0x74>
    mem = -1;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003692:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d015      	beq.n	80036c6 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <osEventFlagsNew+0x3a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b1f      	cmp	r3, #31
 80036a8:	d902      	bls.n	80036b0 <osEventFlagsNew+0x3a>
        mem = 1;
 80036aa:	2301      	movs	r3, #1
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	e00c      	b.n	80036ca <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <osEventFlagsNew+0x54>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <osEventFlagsNew+0x54>
          mem = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	e001      	b.n	80036ca <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fb5d 	bl	8003d94 <xEventGroupCreateStatic>
 80036da:	6178      	str	r0, [r7, #20]
 80036dc:	e005      	b.n	80036ea <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d102      	bne.n	80036ea <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80036e4:	f000 fb8d 	bl	8003e02 <xEventGroupCreate>
 80036e8:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80036ea:	697b      	ldr	r3, [r7, #20]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d004      	beq.n	8003712 <osEventFlagsSet+0x1e>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8003712:	f06f 0303 	mvn.w	r3, #3
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	e028      	b.n	800376c <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800371a:	f3ef 8305 	mrs	r3, IPSR
 800371e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003720:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003722:	2b00      	cmp	r3, #0
 8003724:	d01d      	beq.n	8003762 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	461a      	mov	r2, r3
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	6938      	ldr	r0, [r7, #16]
 8003734:	f000 fd86 	bl	8004244 <xEventGroupSetBitsFromISR>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800373e:	f06f 0302 	mvn.w	r3, #2
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	e012      	b.n	800376c <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00d      	beq.n	800376c <osEventFlagsSet+0x78>
 8003750:	4b09      	ldr	r3, [pc, #36]	; (8003778 <osEventFlagsSet+0x84>)
 8003752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	e004      	b.n	800376c <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8003762:	6839      	ldr	r1, [r7, #0]
 8003764:	6938      	ldr	r0, [r7, #16]
 8003766:	f000 fca5 	bl	80040b4 <xEventGroupSetBits>
 800376a:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800376c:	697b      	ldr	r3, [r7, #20]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000ed04 	.word	0xe000ed04

0800377c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d004      	beq.n	800379a <osEventFlagsClear+0x1e>
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800379a:	f06f 0303 	mvn.w	r3, #3
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e019      	b.n	80037d6 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037a2:	f3ef 8305 	mrs	r3, IPSR
 80037a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80037a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80037ae:	6938      	ldr	r0, [r7, #16]
 80037b0:	f000 fc5c 	bl	800406c <xEventGroupGetBitsFromISR>
 80037b4:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	6938      	ldr	r0, [r7, #16]
 80037ba:	f000 fc43 	bl	8004044 <xEventGroupClearBitsFromISR>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d108      	bne.n	80037d6 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80037c4:	f06f 0302 	mvn.w	r3, #2
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e004      	b.n	80037d6 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	6938      	ldr	r0, [r7, #16]
 80037d0:	f000 fc00 	bl	8003fd4 <xEventGroupClearBits>
 80037d4:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80037d6:	697b      	ldr	r3, [r7, #20]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d004      	beq.n	8003802 <osEventFlagsWait+0x22>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8003802:	f06f 0303 	mvn.w	r3, #3
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	e04b      	b.n	80038a2 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800380a:	f3ef 8305 	mrs	r3, IPSR
 800380e:	617b      	str	r3, [r7, #20]
  return(result);
 8003810:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8003816:	f06f 0305 	mvn.w	r3, #5
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	e041      	b.n	80038a2 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
 800382c:	e001      	b.n	8003832 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800383c:	2300      	movs	r3, #0
 800383e:	623b      	str	r3, [r7, #32]
 8003840:	e001      	b.n	8003846 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	68b9      	ldr	r1, [r7, #8]
 8003850:	69b8      	ldr	r0, [r7, #24]
 8003852:	f000 faf1 	bl	8003e38 <xEventGroupWaitBits>
 8003856:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	4013      	ands	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d019      	beq.n	80038a2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8003874:	f06f 0301 	mvn.w	r3, #1
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e012      	b.n	80038a2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800387c:	f06f 0302 	mvn.w	r3, #2
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e00e      	b.n	80038a2 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8003894:	f06f 0301 	mvn.w	r3, #1
 8003898:	61fb      	str	r3, [r7, #28]
 800389a:	e002      	b.n	80038a2 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800389c:	f06f 0302 	mvn.w	r3, #2
 80038a0:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80038a2:	69fb      	ldr	r3, [r7, #28]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038b8:	f3ef 8305 	mrs	r3, IPSR
 80038bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038be:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d174      	bne.n	80039ae <osMutexNew+0x102>
    if (attr != NULL) {
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	e001      	b.n	80038d6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <osMutexNew+0x3a>
      rmtx = 1U;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e001      	b.n	80038ea <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d15c      	bne.n	80039ae <osMutexNew+0x102>
      mem = -1;
 80038f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038f8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d015      	beq.n	800392c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <osMutexNew+0x6a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b4f      	cmp	r3, #79	; 0x4f
 800390e:	d902      	bls.n	8003916 <osMutexNew+0x6a>
          mem = 1;
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e00c      	b.n	8003930 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <osMutexNew+0x84>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d104      	bne.n	8003930 <osMutexNew+0x84>
            mem = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e001      	b.n	8003930 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d112      	bne.n	800395c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d007      	beq.n	800394c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4619      	mov	r1, r3
 8003942:	2004      	movs	r0, #4
 8003944:	f000 feb5 	bl	80046b2 <xQueueCreateMutexStatic>
 8003948:	61f8      	str	r0, [r7, #28]
 800394a:	e016      	b.n	800397a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4619      	mov	r1, r3
 8003952:	2001      	movs	r0, #1
 8003954:	f000 fead 	bl	80046b2 <xQueueCreateMutexStatic>
 8003958:	61f8      	str	r0, [r7, #28]
 800395a:	e00e      	b.n	800397a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10b      	bne.n	800397a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d004      	beq.n	8003972 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003968:	2004      	movs	r0, #4
 800396a:	f000 fe8a 	bl	8004682 <xQueueCreateMutex>
 800396e:	61f8      	str	r0, [r7, #28]
 8003970:	e003      	b.n	800397a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003972:	2001      	movs	r0, #1
 8003974:	f000 fe85 	bl	8004682 <xQueueCreateMutex>
 8003978:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00c      	beq.n	800399a <osMutexNew+0xee>
        if (attr != NULL) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <osMutexNew+0xe2>
          name = attr->name;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	e001      	b.n	8003992 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	69f8      	ldr	r0, [r7, #28]
 8003996:	f001 fc3f 	bl	8005218 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <osMutexNew+0x102>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80039ae:	69fb      	ldr	r3, [r7, #28]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f023 0301 	bic.w	r3, r3, #1
 80039c8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d6:	f3ef 8305 	mrs	r3, IPSR
 80039da:	60bb      	str	r3, [r7, #8]
  return(result);
 80039dc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <osMutexAcquire+0x32>
    stat = osErrorISR;
 80039e2:	f06f 0305 	mvn.w	r3, #5
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	e02c      	b.n	8003a44 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d103      	bne.n	80039f8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80039f0:	f06f 0303 	mvn.w	r3, #3
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	e025      	b.n	8003a44 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80039fe:	6839      	ldr	r1, [r7, #0]
 8003a00:	6938      	ldr	r0, [r7, #16]
 8003a02:	f000 fea5 	bl	8004750 <xQueueTakeMutexRecursive>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d01b      	beq.n	8003a44 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003a12:	f06f 0301 	mvn.w	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e014      	b.n	8003a44 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003a1a:	f06f 0302 	mvn.w	r3, #2
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e010      	b.n	8003a44 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003a22:	6839      	ldr	r1, [r7, #0]
 8003a24:	6938      	ldr	r0, [r7, #16]
 8003a26:	f001 f943 	bl	8004cb0 <xQueueSemaphoreTake>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d009      	beq.n	8003a44 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003a36:	f06f 0301 	mvn.w	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e002      	b.n	8003a44 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003a3e:	f06f 0302 	mvn.w	r3, #2
 8003a42:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003a44:	697b      	ldr	r3, [r7, #20]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b086      	sub	sp, #24
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a6a:	f3ef 8305 	mrs	r3, IPSR
 8003a6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a70:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <osMutexRelease+0x30>
    stat = osErrorISR;
 8003a76:	f06f 0305 	mvn.w	r3, #5
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e01f      	b.n	8003abe <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003a84:	f06f 0303 	mvn.w	r3, #3
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	e018      	b.n	8003abe <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003a92:	6938      	ldr	r0, [r7, #16]
 8003a94:	f000 fe28 	bl	80046e8 <xQueueGiveMutexRecursive>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d00f      	beq.n	8003abe <osMutexRelease+0x70>
        stat = osErrorResource;
 8003a9e:	f06f 0302 	mvn.w	r3, #2
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e00b      	b.n	8003abe <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6938      	ldr	r0, [r7, #16]
 8003aae:	f000 fe85 	bl	80047bc <xQueueGenericSend>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d002      	beq.n	8003abe <osMutexRelease+0x70>
        stat = osErrorResource;
 8003ab8:	f06f 0302 	mvn.w	r3, #2
 8003abc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08a      	sub	sp, #40	; 0x28
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad8:	f3ef 8305 	mrs	r3, IPSR
 8003adc:	613b      	str	r3, [r7, #16]
  return(result);
 8003ade:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d15f      	bne.n	8003ba4 <osMessageQueueNew+0xdc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d05c      	beq.n	8003ba4 <osMessageQueueNew+0xdc>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d059      	beq.n	8003ba4 <osMessageQueueNew+0xdc>
    mem = -1;
 8003af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003af4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d029      	beq.n	8003b50 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <osMessageQueueNew+0x62>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b4f      	cmp	r3, #79	; 0x4f
 8003b0a:	d90e      	bls.n	8003b2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d302      	bcc.n	8003b2a <osMessageQueueNew+0x62>
        mem = 1;
 8003b24:	2301      	movs	r3, #1
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e014      	b.n	8003b54 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d110      	bne.n	8003b54 <osMessageQueueNew+0x8c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d108      	bne.n	8003b54 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d104      	bne.n	8003b54 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	e001      	b.n	8003b54 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d10b      	bne.n	8003b72 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2100      	movs	r1, #0
 8003b64:	9100      	str	r1, [sp, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fc9b 	bl	80044a4 <xQueueGenericCreateStatic>
 8003b6e:	61f8      	str	r0, [r7, #28]
 8003b70:	e008      	b.n	8003b84 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b78:	2200      	movs	r2, #0
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 fd09 	bl	8004594 <xQueueGenericCreate>
 8003b82:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00c      	beq.n	8003ba4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e001      	b.n	8003b9c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b9c:	6979      	ldr	r1, [r7, #20]
 8003b9e:	69f8      	ldr	r0, [r7, #28]
 8003ba0:	f001 fb3a 	bl	8005218 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ba4:	69fb      	ldr	r3, [r7, #28]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc8:	f3ef 8305 	mrs	r3, IPSR
 8003bcc:	617b      	str	r3, [r7, #20]
  return(result);
 8003bce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d028      	beq.n	8003c26 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <osMessageQueuePut+0x36>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <osMessageQueuePut+0x36>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003be6:	f06f 0303 	mvn.w	r3, #3
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e038      	b.n	8003c60 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bf2:	f107 0210 	add.w	r2, r7, #16
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	69b8      	ldr	r0, [r7, #24]
 8003bfc:	f000 fedc 	bl	80049b8 <xQueueGenericSendFromISR>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d003      	beq.n	8003c0e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003c06:	f06f 0302 	mvn.w	r3, #2
 8003c0a:	61fb      	str	r3, [r7, #28]
 8003c0c:	e028      	b.n	8003c60 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d025      	beq.n	8003c60 <osMessageQueuePut+0xb0>
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <osMessageQueuePut+0xbc>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	e01c      	b.n	8003c60 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <osMessageQueuePut+0x82>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003c32:	f06f 0303 	mvn.w	r3, #3
 8003c36:	61fb      	str	r3, [r7, #28]
 8003c38:	e012      	b.n	8003c60 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	69b8      	ldr	r0, [r7, #24]
 8003c42:	f000 fdbb 	bl	80047bc <xQueueGenericSend>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d009      	beq.n	8003c60 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003c52:	f06f 0301 	mvn.w	r3, #1
 8003c56:	61fb      	str	r3, [r7, #28]
 8003c58:	e002      	b.n	8003c60 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003c5a:	f06f 0302 	mvn.w	r3, #2
 8003c5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003c60:	69fb      	ldr	r3, [r7, #28]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c86:	f3ef 8305 	mrs	r3, IPSR
 8003c8a:	617b      	str	r3, [r7, #20]
  return(result);
 8003c8c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <osMessageQueueGet+0x34>
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <osMessageQueueGet+0x34>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d003      	beq.n	8003cac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003ca4:	f06f 0303 	mvn.w	r3, #3
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	e037      	b.n	8003d1c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003cb0:	f107 0310 	add.w	r3, r7, #16
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	69b8      	ldr	r0, [r7, #24]
 8003cba:	f001 f905 	bl	8004ec8 <xQueueReceiveFromISR>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d003      	beq.n	8003ccc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003cc4:	f06f 0302 	mvn.w	r3, #2
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e027      	b.n	8003d1c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d024      	beq.n	8003d1c <osMessageQueueGet+0xac>
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <osMessageQueueGet+0xb8>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	e01b      	b.n	8003d1c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <osMessageQueueGet+0x80>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d103      	bne.n	8003cf8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003cf0:	f06f 0303 	mvn.w	r3, #3
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e011      	b.n	8003d1c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	68b9      	ldr	r1, [r7, #8]
 8003cfc:	69b8      	ldr	r0, [r7, #24]
 8003cfe:	f000 fef7 	bl	8004af0 <xQueueReceive>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d009      	beq.n	8003d1c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003d0e:	f06f 0301 	mvn.w	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	e002      	b.n	8003d1c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003d16:	f06f 0302 	mvn.w	r3, #2
 8003d1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a07      	ldr	r2, [pc, #28]	; (8003d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <vApplicationGetIdleTaskMemory+0x30>)
 8003d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	200000bc 	.word	0x200000bc
 8003d5c:	20000118 	.word	0x20000118

08003d60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <vApplicationGetTimerTaskMemory+0x2c>)
 8003d70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4a06      	ldr	r2, [pc, #24]	; (8003d90 <vApplicationGetTimerTaskMemory+0x30>)
 8003d76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d7e:	601a      	str	r2, [r3, #0]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	20000318 	.word	0x20000318
 8003d90:	20000374 	.word	0x20000374

08003d94 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8003db8:	2320      	movs	r3, #32
 8003dba:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d00a      	beq.n	8003dd8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	f383 8811 	msr	BASEPRI, r3
 8003dca:	f3bf 8f6f 	isb	sy
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	60fb      	str	r3, [r7, #12]
}
 8003dd4:	bf00      	nop
 8003dd6:	e7fe      	b.n	8003dd6 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fa3d 	bl	800426c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2201      	movs	r2, #1
 8003df6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8003df8:	697b      	ldr	r3, [r7, #20]
	}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8003e08:	2020      	movs	r0, #32
 8003e0a:	f003 f9e5 	bl	80071d8 <pvPortMalloc>
 8003e0e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f000 fa23 	bl	800426c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8003e2c:	687b      	ldr	r3, [r7, #4]
	}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b090      	sub	sp, #64	; 0x40
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xEventGroupWaitBits+0x36>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <xEventGroupWaitBits+0x56>
	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	61fb      	str	r3, [r7, #28]
}
 8003e8a:	bf00      	nop
 8003e8c:	e7fe      	b.n	8003e8c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <xEventGroupWaitBits+0x72>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	61bb      	str	r3, [r7, #24]
}
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eaa:	f002 f9e5 	bl	8006278 <xTaskGetSchedulerState>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <xEventGroupWaitBits+0x82>
 8003eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <xEventGroupWaitBits+0x86>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <xEventGroupWaitBits+0x88>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <xEventGroupWaitBits+0xa2>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	617b      	str	r3, [r7, #20]
}
 8003ed6:	bf00      	nop
 8003ed8:	e7fe      	b.n	8003ed8 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8003eda:	f001 fd3d 	bl	8005958 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eea:	f000 f988 	bl	80041fe <prvTestWaitCondition>
 8003eee:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00e      	beq.n	8003f14 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d028      	beq.n	8003f56 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e020      	b.n	8003f56 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8003f14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8003f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 8003f22:	e018      	b.n	8003f56 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f30:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	1d18      	adds	r0, r3, #4
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f001 fefb 	bl	8005d48 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8003f52:	2300      	movs	r3, #0
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8003f56:	f001 fd0d 	bl	8005974 <xTaskResumeAll>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8003f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d031      	beq.n	8003fc6 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8003f68:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <xEventGroupWaitBits+0x198>)
 8003f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8003f78:	f002 faf4 	bl	8006564 <uxTaskResetEventItemValue>
 8003f7c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d11a      	bne.n	8003fbe <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8003f88:	f003 f804 	bl	8006f94 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	68b9      	ldr	r1, [r7, #8]
 8003f96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f98:	f000 f931 	bl	80041fe <prvTestWaitCondition>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8003fba:	f003 f81b 	bl	8006ff4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8003fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3740      	adds	r7, #64	; 0x40
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xEventGroupClearBits+0x2a>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	60fb      	str	r3, [r7, #12]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <xEventGroupClearBits+0x4a>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60bb      	str	r3, [r7, #8]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800401e:	f002 ffb9 	bl	8006f94 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	43db      	mvns	r3, r3
 8004030:	401a      	ands	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8004036:	f002 ffdd 	bl	8006ff4 <vPortExitCritical>

	return uxReturn;
 800403a:	693b      	ldr	r3, [r7, #16]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800404e:	2300      	movs	r3, #0
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4804      	ldr	r0, [pc, #16]	; (8004068 <xEventGroupClearBitsFromISR+0x24>)
 8004056:	f002 fe53 	bl	8006d00 <xTimerPendFunctionCallFromISR>
 800405a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800405c:	68fb      	ldr	r3, [r7, #12]
	}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	080041e5 	.word	0x080041e5

0800406c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004078:	f3ef 8211 	mrs	r2, BASEPRI
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	60fa      	str	r2, [r7, #12]
 800408e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004090:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004092:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040a4:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80040a6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80040a8:	4618      	mov	r0, r3
 80040aa:	3724      	adds	r7, #36	; 0x24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	; 0x38
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80040be:	2300      	movs	r3, #0
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xEventGroupSetBits+0x32>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	613b      	str	r3, [r7, #16]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <xEventGroupSetBits+0x52>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	3304      	adds	r3, #4
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	3308      	adds	r3, #8
 8004110:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004112:	f001 fc21 	bl	8005958 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800411c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	431a      	orrs	r2, r3
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004128:	e03c      	b.n	80041a4 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004136:	2300      	movs	r3, #0
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004140:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004148:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d108      	bne.n	8004166 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8004160:	2301      	movs	r3, #1
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004164:	e008      	b.n	8004178 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	69ba      	ldr	r2, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d101      	bne.n	8004178 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004174:	2301      	movs	r3, #1
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4313      	orrs	r3, r2
 800418e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004198:	4619      	mov	r1, r3
 800419a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800419c:	f001 fea0 	bl	8005ee0 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80041a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d1be      	bne.n	800412a <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	43db      	mvns	r3, r3
 80041b4:	401a      	ands	r2, r3
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80041ba:	f001 fbdb 	bl	8005974 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	681b      	ldr	r3, [r3, #0]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3738      	adds	r7, #56	; 0x38
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7ff ff6c 	bl	80040b4 <xEventGroupSetBits>
}
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80041ee:	6839      	ldr	r1, [r7, #0]
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff feef 	bl	8003fd4 <xEventGroupClearBits>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800421e:	2301      	movs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e007      	b.n	8004234 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4013      	ands	r3, r2
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	429a      	cmp	r2, r3
 800422e:	d101      	bne.n	8004234 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004230:	2301      	movs	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004234:	697b      	ldr	r3, [r7, #20]
}
 8004236:	4618      	mov	r0, r3
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	68f9      	ldr	r1, [r7, #12]
 8004256:	4804      	ldr	r0, [pc, #16]	; (8004268 <xEventGroupSetBitsFromISR+0x24>)
 8004258:	f002 fd52 	bl	8006d00 <xTimerPendFunctionCallFromISR>
 800425c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800425e:	697b      	ldr	r3, [r7, #20]
	}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	080041cb 	.word	0x080041cb

0800426c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f103 0208 	add.w	r2, r3, #8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004284:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f103 0208 	add.w	r2, r3, #8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f103 0208 	add.w	r2, r3, #8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042c6:	b480      	push	{r7}
 80042c8:	b085      	sub	sp, #20
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	1c5a      	adds	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	601a      	str	r2, [r3, #0]
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004324:	d103      	bne.n	800432e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e00c      	b.n	8004348 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	3308      	adds	r3, #8
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e002      	b.n	800433c <vListInsert+0x2e>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d2f6      	bcs.n	8004336 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6892      	ldr	r2, [r2, #8]
 8004396:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6852      	ldr	r2, [r2, #4]
 80043a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d103      	bne.n	80043b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	1e5a      	subs	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueGenericReset+0x2a>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	60bb      	str	r3, [r7, #8]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80043fe:	f002 fdc9 	bl	8006f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440a:	68f9      	ldr	r1, [r7, #12]
 800440c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	441a      	add	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	3b01      	subs	r3, #1
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	441a      	add	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	22ff      	movs	r2, #255	; 0xff
 8004442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	22ff      	movs	r2, #255	; 0xff
 800444a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d114      	bne.n	800447e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01a      	beq.n	8004492 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3310      	adds	r3, #16
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fcd9 	bl	8005e18 <xTaskRemoveFromEventList>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d012      	beq.n	8004492 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <xQueueGenericReset+0xcc>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	e009      	b.n	8004492 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	3310      	adds	r3, #16
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff fef2 	bl	800426c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3324      	adds	r3, #36	; 0x24
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff feed 	bl	800426c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004492:	f002 fdaf 	bl	8006ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004496:	2301      	movs	r3, #1
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08e      	sub	sp, #56	; 0x38
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80044d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d8:	f383 8811 	msr	BASEPRI, r3
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f3bf 8f4f 	dsb	sy
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044e6:	bf00      	nop
 80044e8:	e7fe      	b.n	80044e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <xQueueGenericCreateStatic+0x52>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <xQueueGenericCreateStatic+0x56>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <xQueueGenericCreateStatic+0x58>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	623b      	str	r3, [r7, #32]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <xQueueGenericCreateStatic+0x7e>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <xQueueGenericCreateStatic+0x82>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <xQueueGenericCreateStatic+0x84>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	61fb      	str	r3, [r7, #28]
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004542:	2350      	movs	r3, #80	; 0x50
 8004544:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b50      	cmp	r3, #80	; 0x50
 800454a:	d00a      	beq.n	8004562 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	61bb      	str	r3, [r7, #24]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004562:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004576:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f83f 	bl	8004608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800458c:	4618      	mov	r0, r3
 800458e:	3730      	adds	r7, #48	; 0x30
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10a      	bne.n	80045be <xQueueGenericCreate+0x2a>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	613b      	str	r3, [r7, #16]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3350      	adds	r3, #80	; 0x50
 80045cc:	4618      	mov	r0, r3
 80045ce:	f002 fe03 	bl	80071d8 <pvPortMalloc>
 80045d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	3350      	adds	r3, #80	; 0x50
 80045e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045ec:	79fa      	ldrb	r2, [r7, #7]
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f805 	bl	8004608 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045fe:	69bb      	ldr	r3, [r7, #24]
	}
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e002      	b.n	800462a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004636:	2101      	movs	r1, #1
 8004638:	69b8      	ldr	r0, [r7, #24]
 800463a:	f7ff fecb 	bl	80043d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004646:	bf00      	nop
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800466e:	2300      	movs	r3, #0
 8004670:	2200      	movs	r2, #0
 8004672:	2100      	movs	r1, #0
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f8a1 	bl	80047bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800467a:	bf00      	nop
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004682:	b580      	push	{r7, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800468c:	2301      	movs	r3, #1
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	2300      	movs	r3, #0
 8004692:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	461a      	mov	r2, r3
 8004698:	6939      	ldr	r1, [r7, #16]
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ff7a 	bl	8004594 <xQueueGenericCreate>
 80046a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff ffd3 	bl	800464e <prvInitialiseMutex>

		return xNewQueue;
 80046a8:	68fb      	ldr	r3, [r7, #12]
	}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b088      	sub	sp, #32
 80046b6:	af02      	add	r7, sp, #8
 80046b8:	4603      	mov	r3, r0
 80046ba:	6039      	str	r1, [r7, #0]
 80046bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046be:	2301      	movs	r3, #1
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2200      	movs	r2, #0
 80046ce:	6939      	ldr	r1, [r7, #16]
 80046d0:	6978      	ldr	r0, [r7, #20]
 80046d2:	f7ff fee7 	bl	80044a4 <xQueueGenericCreateStatic>
 80046d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	f7ff ffb8 	bl	800464e <prvInitialiseMutex>

		return xNewQueue;
 80046de:	68fb      	ldr	r3, [r7, #12]
	}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60fb      	str	r3, [r7, #12]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	689c      	ldr	r4, [r3, #8]
 8004714:	f001 fda0 	bl	8006258 <xTaskGetCurrentTaskHandle>
 8004718:	4603      	mov	r3, r0
 800471a:	429c      	cmp	r4, r3
 800471c:	d111      	bne.n	8004742 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	1e5a      	subs	r2, r3, #1
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004730:	2300      	movs	r3, #0
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	6938      	ldr	r0, [r7, #16]
 8004738:	f000 f840 	bl	80047bc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800473c:	2301      	movs	r3, #1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	e001      	b.n	8004746 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004746:	697b      	ldr	r3, [r7, #20]
	}
 8004748:	4618      	mov	r0, r3
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}

08004750 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10a      	bne.n	800477a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	60fb      	str	r3, [r7, #12]
}
 8004776:	bf00      	nop
 8004778:	e7fe      	b.n	8004778 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	689c      	ldr	r4, [r3, #8]
 800477e:	f001 fd6b 	bl	8006258 <xTaskGetCurrentTaskHandle>
 8004782:	4603      	mov	r3, r0
 8004784:	429c      	cmp	r4, r3
 8004786:	d107      	bne.n	8004798 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	1c5a      	adds	r2, r3, #1
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e00c      	b.n	80047b2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	6938      	ldr	r0, [r7, #16]
 800479c:	f000 fa88 	bl	8004cb0 <xQueueSemaphoreTake>
 80047a0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80047b2:	697b      	ldr	r3, [r7, #20]
	}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}

080047bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b08e      	sub	sp, #56	; 0x38
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
 80047c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <xQueueGenericSend+0x32>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047ea:	bf00      	nop
 80047ec:	e7fe      	b.n	80047ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <xQueueGenericSend+0x40>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <xQueueGenericSend+0x44>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <xQueueGenericSend+0x46>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <xQueueGenericSend+0x60>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b02      	cmp	r3, #2
 8004820:	d103      	bne.n	800482a <xQueueGenericSend+0x6e>
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <xQueueGenericSend+0x72>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueGenericSend+0x74>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueGenericSend+0x8e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	623b      	str	r3, [r7, #32]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800484a:	f001 fd15 	bl	8006278 <xTaskGetSchedulerState>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <xQueueGenericSend+0x9e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <xQueueGenericSend+0xa2>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <xQueueGenericSend+0xa4>
 800485e:	2300      	movs	r3, #0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <xQueueGenericSend+0xbe>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	61fb      	str	r3, [r7, #28]
}
 8004876:	bf00      	nop
 8004878:	e7fe      	b.n	8004878 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800487a:	f002 fb8b 	bl	8006f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <xQueueGenericSend+0xd4>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d129      	bne.n	80048e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	68b9      	ldr	r1, [r7, #8]
 8004894:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004896:	f000 fbaf 	bl	8004ff8 <prvCopyDataToQueue>
 800489a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d010      	beq.n	80048c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 fab5 	bl	8005e18 <xTaskRemoveFromEventList>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048b4:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <xQueueGenericSend+0x1f8>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	e00a      	b.n	80048dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048cc:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <xQueueGenericSend+0x1f8>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048dc:	f002 fb8a 	bl	8006ff4 <vPortExitCritical>
				return pdPASS;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e063      	b.n	80049ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048ea:	f002 fb83 	bl	8006ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e05c      	b.n	80049ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d106      	bne.n	8004906 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048f8:	f107 0314 	add.w	r3, r7, #20
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 fb51 	bl	8005fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004906:	f002 fb75 	bl	8006ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800490a:	f001 f825 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800490e:	f002 fb41 	bl	8006f94 <vPortEnterCritical>
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004918:	b25b      	sxtb	r3, r3
 800491a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800491e:	d103      	bne.n	8004928 <xQueueGenericSend+0x16c>
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492e:	b25b      	sxtb	r3, r3
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004934:	d103      	bne.n	800493e <xQueueGenericSend+0x182>
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800493e:	f002 fb59 	bl	8006ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004942:	1d3a      	adds	r2, r7, #4
 8004944:	f107 0314 	add.w	r3, r7, #20
 8004948:	4611      	mov	r1, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fb40 	bl	8005fd0 <xTaskCheckForTimeOut>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d124      	bne.n	80049a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004958:	f000 fc46 	bl	80051e8 <prvIsQueueFull>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d018      	beq.n	8004994 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	3310      	adds	r3, #16
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f9c8 	bl	8005d00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004972:	f000 fbd1 	bl	8005118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004976:	f000 fffd 	bl	8005974 <xTaskResumeAll>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f af7c 	bne.w	800487a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004982:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <xQueueGenericSend+0x1f8>)
 8004984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	e772      	b.n	800487a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004996:	f000 fbbf 	bl	8005118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800499a:	f000 ffeb 	bl	8005974 <xTaskResumeAll>
 800499e:	e76c      	b.n	800487a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049a2:	f000 fbb9 	bl	8005118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a6:	f000 ffe5 	bl	8005974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3738      	adds	r7, #56	; 0x38
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b090      	sub	sp, #64	; 0x40
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <xQueueGenericSendFromISR+0x3c>
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <xQueueGenericSendFromISR+0x40>
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <xQueueGenericSendFromISR+0x42>
 80049f8:	2300      	movs	r3, #0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a10:	bf00      	nop
 8004a12:	e7fe      	b.n	8004a12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d103      	bne.n	8004a22 <xQueueGenericSendFromISR+0x6a>
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <xQueueGenericSendFromISR+0x6e>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <xQueueGenericSendFromISR+0x70>
 8004a26:	2300      	movs	r3, #0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	623b      	str	r3, [r7, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	e7fe      	b.n	8004a40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a42:	f002 fb89 	bl	8007158 <vPortValidateInterruptPriority>
	__asm volatile
 8004a46:	f3ef 8211 	mrs	r2, BASEPRI
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	61fa      	str	r2, [r7, #28]
 8004a5c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <xQueueGenericSendFromISR+0xbc>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d12f      	bne.n	8004ad4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a8a:	f000 fab5 	bl	8004ff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a96:	d112      	bne.n	8004abe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d016      	beq.n	8004ace <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	3324      	adds	r3, #36	; 0x24
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 f9b7 	bl	8005e18 <xTaskRemoveFromEventList>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00e      	beq.n	8004ace <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	601a      	str	r2, [r3, #0]
 8004abc:	e007      	b.n	8004ace <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004abe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	b25a      	sxtb	r2, r3
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ad2:	e001      	b.n	8004ad8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f383 8811 	msr	BASEPRI, r3
}
 8004ae2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3740      	adds	r7, #64	; 0x40
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08c      	sub	sp, #48	; 0x30
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <xQueueReceive+0x30>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	623b      	str	r3, [r7, #32]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <xQueueReceive+0x3e>
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <xQueueReceive+0x42>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <xQueueReceive+0x44>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10a      	bne.n	8004b4e <xQueueReceive+0x5e>
	__asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	61fb      	str	r3, [r7, #28]
}
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b4e:	f001 fb93 	bl	8006278 <xTaskGetSchedulerState>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <xQueueReceive+0x6e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <xQueueReceive+0x72>
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <xQueueReceive+0x74>
 8004b62:	2300      	movs	r3, #0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xQueueReceive+0x8e>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	61bb      	str	r3, [r7, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b7e:	f002 fa09 	bl	8006f94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d01f      	beq.n	8004bce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b92:	f000 fa9b 	bl	80050cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	1e5a      	subs	r2, r3, #1
 8004b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	3310      	adds	r3, #16
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f934 	bl	8005e18 <xTaskRemoveFromEventList>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d007      	beq.n	8004bc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004bb6:	4b3d      	ldr	r3, [pc, #244]	; (8004cac <xQueueReceive+0x1bc>)
 8004bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bc6:	f002 fa15 	bl	8006ff4 <vPortExitCritical>
				return pdPASS;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e069      	b.n	8004ca2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bd4:	f002 fa0e 	bl	8006ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e062      	b.n	8004ca2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d106      	bne.n	8004bf0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be2:	f107 0310 	add.w	r3, r7, #16
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 f9dc 	bl	8005fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bf0:	f002 fa00 	bl	8006ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bf4:	f000 feb0 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bf8:	f002 f9cc 	bl	8006f94 <vPortEnterCritical>
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c02:	b25b      	sxtb	r3, r3
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c08:	d103      	bne.n	8004c12 <xQueueReceive+0x122>
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c18:	b25b      	sxtb	r3, r3
 8004c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c1e:	d103      	bne.n	8004c28 <xQueueReceive+0x138>
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c28:	f002 f9e4 	bl	8006ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c2c:	1d3a      	adds	r2, r7, #4
 8004c2e:	f107 0310 	add.w	r3, r7, #16
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 f9cb 	bl	8005fd0 <xTaskCheckForTimeOut>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d123      	bne.n	8004c88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c42:	f000 fabb 	bl	80051bc <prvIsQueueEmpty>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d017      	beq.n	8004c7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4611      	mov	r1, r2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f853 	bl	8005d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c5c:	f000 fa5c 	bl	8005118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c60:	f000 fe88 	bl	8005974 <xTaskResumeAll>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d189      	bne.n	8004b7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <xQueueReceive+0x1bc>)
 8004c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	e780      	b.n	8004b7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c7e:	f000 fa4b 	bl	8005118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c82:	f000 fe77 	bl	8005974 <xTaskResumeAll>
 8004c86:	e77a      	b.n	8004b7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8a:	f000 fa45 	bl	8005118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c8e:	f000 fe71 	bl	8005974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c94:	f000 fa92 	bl	80051bc <prvIsQueueEmpty>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f43f af6f 	beq.w	8004b7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ca0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3730      	adds	r7, #48	; 0x30
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	e000ed04 	.word	0xe000ed04

08004cb0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08e      	sub	sp, #56	; 0x38
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10a      	bne.n	8004ce2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	623b      	str	r3, [r7, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	61fb      	str	r3, [r7, #28]
}
 8004cfc:	bf00      	nop
 8004cfe:	e7fe      	b.n	8004cfe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d00:	f001 faba 	bl	8006278 <xTaskGetSchedulerState>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d102      	bne.n	8004d10 <xQueueSemaphoreTake+0x60>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <xQueueSemaphoreTake+0x64>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <xQueueSemaphoreTake+0x66>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61bb      	str	r3, [r7, #24]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d30:	f002 f930 	bl	8006f94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d024      	beq.n	8004d8a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	1e5a      	subs	r2, r3, #1
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d50:	f001 fc20 	bl	8006594 <pvTaskIncrementMutexHeldCount>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00f      	beq.n	8004d82 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	3310      	adds	r3, #16
 8004d66:	4618      	mov	r0, r3
 8004d68:	f001 f856 	bl	8005e18 <xTaskRemoveFromEventList>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d72:	4b54      	ldr	r3, [pc, #336]	; (8004ec4 <xQueueSemaphoreTake+0x214>)
 8004d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d82:	f002 f937 	bl	8006ff4 <vPortExitCritical>
				return pdPASS;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e097      	b.n	8004eba <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d111      	bne.n	8004db4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	617b      	str	r3, [r7, #20]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004dac:	f002 f922 	bl	8006ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004db0:	2300      	movs	r3, #0
 8004db2:	e082      	b.n	8004eba <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 f8f0 	bl	8005fa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004dc8:	f002 f914 	bl	8006ff4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004dcc:	f000 fdc4 	bl	8005958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dd0:	f002 f8e0 	bl	8006f94 <vPortEnterCritical>
 8004dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dda:	b25b      	sxtb	r3, r3
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de0:	d103      	bne.n	8004dea <xQueueSemaphoreTake+0x13a>
 8004de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004df0:	b25b      	sxtb	r3, r3
 8004df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004df6:	d103      	bne.n	8004e00 <xQueueSemaphoreTake+0x150>
 8004df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e00:	f002 f8f8 	bl	8006ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e04:	463a      	mov	r2, r7
 8004e06:	f107 030c 	add.w	r3, r7, #12
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f001 f8df 	bl	8005fd0 <xTaskCheckForTimeOut>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d132      	bne.n	8004e7e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e1a:	f000 f9cf 	bl	80051bc <prvIsQueueEmpty>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d026      	beq.n	8004e72 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004e2c:	f002 f8b2 	bl	8006f94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f001 fa3d 	bl	80062b4 <xTaskPriorityInherit>
 8004e3a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004e3c:	f002 f8da 	bl	8006ff4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e42:	3324      	adds	r3, #36	; 0x24
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 ff59 	bl	8005d00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e50:	f000 f962 	bl	8005118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e54:	f000 fd8e 	bl	8005974 <xTaskResumeAll>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f47f af68 	bne.w	8004d30 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004e60:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <xQueueSemaphoreTake+0x214>)
 8004e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	e75e      	b.n	8004d30 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e74:	f000 f950 	bl	8005118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e78:	f000 fd7c 	bl	8005974 <xTaskResumeAll>
 8004e7c:	e758      	b.n	8004d30 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e80:	f000 f94a 	bl	8005118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e84:	f000 fd76 	bl	8005974 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e8a:	f000 f997 	bl	80051bc <prvIsQueueEmpty>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f43f af4d 	beq.w	8004d30 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00d      	beq.n	8004eb8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e9c:	f002 f87a 	bl	8006f94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ea2:	f000 f891 	bl	8004fc8 <prvGetDisinheritPriorityAfterTimeout>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f001 fad6 	bl	8006460 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004eb4:	f002 f89e 	bl	8006ff4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3738      	adds	r7, #56	; 0x38
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08e      	sub	sp, #56	; 0x38
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	623b      	str	r3, [r7, #32]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueueReceiveFromISR+0x3a>
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueReceiveFromISR+0x3e>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueReceiveFromISR+0x40>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61fb      	str	r3, [r7, #28]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f22:	f002 f919 	bl	8007158 <vPortValidateInterruptPriority>
	__asm volatile
 8004f26:	f3ef 8211 	mrs	r2, BASEPRI
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	61ba      	str	r2, [r7, #24]
 8004f3c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f3e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d02f      	beq.n	8004fae <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5c:	f000 f8b6 	bl	80050cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	1e5a      	subs	r2, r3, #1
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f70:	d112      	bne.n	8004f98 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d016      	beq.n	8004fa8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 ff4a 	bl	8005e18 <xTaskRemoveFromEventList>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00e      	beq.n	8004fa8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00b      	beq.n	8004fa8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e007      	b.n	8004fa8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	b25a      	sxtb	r2, r3
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
 8004fac:	e001      	b.n	8004fb2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f383 8811 	msr	BASEPRI, r3
}
 8004fbc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3738      	adds	r7, #56	; 0x38
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d006      	beq.n	8004fe6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	e001      	b.n	8004fea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fea:	68fb      	ldr	r3, [r7, #12]
	}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10d      	bne.n	8005032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d14d      	bne.n	80050ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	4618      	mov	r0, r3
 8005024:	f001 f9ae 	bl	8006384 <xTaskPriorityDisinherit>
 8005028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	609a      	str	r2, [r3, #8]
 8005030:	e043      	b.n	80050ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d119      	bne.n	800506c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6858      	ldr	r0, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	f002 fad6 	bl	80075f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	441a      	add	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	d32b      	bcc.n	80050ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	e026      	b.n	80050ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68d8      	ldr	r0, [r3, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	461a      	mov	r2, r3
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	f002 fabc 	bl	80075f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	425b      	negs	r3, r3
 8005086:	441a      	add	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	429a      	cmp	r2, r3
 8005096:	d207      	bcs.n	80050a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	425b      	negs	r3, r3
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d105      	bne.n	80050ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050c2:	697b      	ldr	r3, [r7, #20]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	441a      	add	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d303      	bcc.n	8005100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68d9      	ldr	r1, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	461a      	mov	r2, r3
 800510a:	6838      	ldr	r0, [r7, #0]
 800510c:	f002 fa72 	bl	80075f4 <memcpy>
	}
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005120:	f001 ff38 	bl	8006f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800512a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800512c:	e011      	b.n	8005152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d012      	beq.n	800515c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3324      	adds	r3, #36	; 0x24
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fe6c 	bl	8005e18 <xTaskRemoveFromEventList>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005146:	f000 ffa5 	bl	8006094 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
 800514c:	3b01      	subs	r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	dce9      	bgt.n	800512e <prvUnlockQueue+0x16>
 800515a:	e000      	b.n	800515e <prvUnlockQueue+0x46>
					break;
 800515c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005166:	f001 ff45 	bl	8006ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800516a:	f001 ff13 	bl	8006f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005176:	e011      	b.n	800519c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d012      	beq.n	80051a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3310      	adds	r3, #16
 8005184:	4618      	mov	r0, r3
 8005186:	f000 fe47 	bl	8005e18 <xTaskRemoveFromEventList>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005190:	f000 ff80 	bl	8006094 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005194:	7bbb      	ldrb	r3, [r7, #14]
 8005196:	3b01      	subs	r3, #1
 8005198:	b2db      	uxtb	r3, r3
 800519a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800519c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	dce9      	bgt.n	8005178 <prvUnlockQueue+0x60>
 80051a4:	e000      	b.n	80051a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	22ff      	movs	r2, #255	; 0xff
 80051ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051b0:	f001 ff20 	bl	8006ff4 <vPortExitCritical>
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051c4:	f001 fee6 	bl	8006f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051d0:	2301      	movs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	e001      	b.n	80051da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051da:	f001 ff0b 	bl	8006ff4 <vPortExitCritical>

	return xReturn;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051f0:	f001 fed0 	bl	8006f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d102      	bne.n	8005206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005200:	2301      	movs	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e001      	b.n	800520a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800520a:	f001 fef3 	bl	8006ff4 <vPortExitCritical>

	return xReturn;
 800520e:	68fb      	ldr	r3, [r7, #12]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3710      	adds	r7, #16
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
 8005226:	e014      	b.n	8005252 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005228:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <vQueueAddToRegistry+0x50>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10b      	bne.n	800524c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005234:	490c      	ldr	r1, [pc, #48]	; (8005268 <vQueueAddToRegistry+0x50>)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800523e:	4a0a      	ldr	r2, [pc, #40]	; (8005268 <vQueueAddToRegistry+0x50>)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800524a:	e006      	b.n	800525a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b07      	cmp	r3, #7
 8005256:	d9e7      	bls.n	8005228 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000774 	.word	0x20000774

0800526c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800527c:	f001 fe8a 	bl	8006f94 <vPortEnterCritical>
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005286:	b25b      	sxtb	r3, r3
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528c:	d103      	bne.n	8005296 <vQueueWaitForMessageRestricted+0x2a>
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800529c:	b25b      	sxtb	r3, r3
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052a2:	d103      	bne.n	80052ac <vQueueWaitForMessageRestricted+0x40>
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ac:	f001 fea2 	bl	8006ff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d106      	bne.n	80052c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	3324      	adds	r3, #36	; 0x24
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68b9      	ldr	r1, [r7, #8]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 fd7d 	bl	8005dc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052c6:	6978      	ldr	r0, [r7, #20]
 80052c8:	f7ff ff26 	bl	8005118 <prvUnlockQueue>
	}
 80052cc:	bf00      	nop
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08e      	sub	sp, #56	; 0x38
 80052d8:	af04      	add	r7, sp, #16
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <xTaskCreateStatic+0x2a>
	__asm volatile
 80052e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	623b      	str	r3, [r7, #32]
}
 80052fa:	bf00      	nop
 80052fc:	e7fe      	b.n	80052fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <xTaskCreateStatic+0x46>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	61fb      	str	r3, [r7, #28]
}
 8005316:	bf00      	nop
 8005318:	e7fe      	b.n	8005318 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800531a:	235c      	movs	r3, #92	; 0x5c
 800531c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	2b5c      	cmp	r3, #92	; 0x5c
 8005322:	d00a      	beq.n	800533a <xTaskCreateStatic+0x66>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	61bb      	str	r3, [r7, #24]
}
 8005336:	bf00      	nop
 8005338:	e7fe      	b.n	8005338 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800533a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01e      	beq.n	8005380 <xTaskCreateStatic+0xac>
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01b      	beq.n	8005380 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005350:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	2202      	movs	r2, #2
 8005356:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800535a:	2300      	movs	r3, #0
 800535c:	9303      	str	r3, [sp, #12]
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	9302      	str	r3, [sp, #8]
 8005362:	f107 0314 	add.w	r3, r7, #20
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 f850 	bl	8005418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005378:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800537a:	f000 f8dd 	bl	8005538 <prvAddNewTaskToReadyList>
 800537e:	e001      	b.n	8005384 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005384:	697b      	ldr	r3, [r7, #20]
	}
 8005386:	4618      	mov	r0, r3
 8005388:	3728      	adds	r7, #40	; 0x28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800538e:	b580      	push	{r7, lr}
 8005390:	b08c      	sub	sp, #48	; 0x30
 8005392:	af04      	add	r7, sp, #16
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 ff18 	bl	80071d8 <pvPortMalloc>
 80053a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00e      	beq.n	80053ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053b0:	205c      	movs	r0, #92	; 0x5c
 80053b2:	f001 ff11 	bl	80071d8 <pvPortMalloc>
 80053b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
 80053c4:	e005      	b.n	80053d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053c6:	6978      	ldr	r0, [r7, #20]
 80053c8:	f001 ffd2 	bl	8007370 <vPortFree>
 80053cc:	e001      	b.n	80053d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d017      	beq.n	8005408 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053e0:	88fa      	ldrh	r2, [r7, #6]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9303      	str	r3, [sp, #12]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	9302      	str	r3, [sp, #8]
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f80e 	bl	8005418 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053fc:	69f8      	ldr	r0, [r7, #28]
 80053fe:	f000 f89b 	bl	8005538 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005402:	2301      	movs	r3, #1
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	e002      	b.n	800540e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800540c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800540e:	69bb      	ldr	r3, [r7, #24]
	}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	461a      	mov	r2, r3
 8005430:	21a5      	movs	r1, #165	; 0xa5
 8005432:	f002 f8ed 	bl	8007610 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005440:	3b01      	subs	r3, #1
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <prvInitialiseNewTask+0x58>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	617b      	str	r3, [r7, #20]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d01f      	beq.n	80054b6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e012      	b.n	80054a2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	4413      	add	r3, r2
 8005482:	7819      	ldrb	r1, [r3, #0]
 8005484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	3334      	adds	r3, #52	; 0x34
 800548c:	460a      	mov	r2, r1
 800548e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	4413      	add	r3, r2
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	3301      	adds	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	d9e9      	bls.n	800547c <prvInitialiseNewTask+0x64>
 80054a8:	e000      	b.n	80054ac <prvInitialiseNewTask+0x94>
			{
				break;
 80054aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b4:	e003      	b.n	80054be <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c0:	2b37      	cmp	r3, #55	; 0x37
 80054c2:	d901      	bls.n	80054c8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054c4:	2337      	movs	r3, #55	; 0x37
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054d2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	3304      	adds	r3, #4
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fe fee4 	bl	80042ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	3318      	adds	r3, #24
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe fedf 	bl	80042ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005502:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	2200      	movs	r2, #0
 8005508:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	69b8      	ldr	r0, [r7, #24]
 8005518:	f001 fc12 	bl	8006d40 <pxPortInitialiseStack>
 800551c:	4602      	mov	r2, r0
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800552e:	bf00      	nop
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005540:	f001 fd28 	bl	8006f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <prvAddNewTaskToReadyList+0xc4>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	3301      	adds	r3, #1
 800554a:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <prvAddNewTaskToReadyList+0xc4>)
 800554c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800554e:	4b2c      	ldr	r3, [pc, #176]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005556:	4a2a      	ldr	r2, [pc, #168]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800555c:	4b27      	ldr	r3, [pc, #156]	; (80055fc <prvAddNewTaskToReadyList+0xc4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d110      	bne.n	8005586 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005564:	f000 fdba 	bl	80060dc <prvInitialiseTaskLists>
 8005568:	e00d      	b.n	8005586 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800556a:	4b26      	ldr	r3, [pc, #152]	; (8005604 <prvAddNewTaskToReadyList+0xcc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005572:	4b23      	ldr	r3, [pc, #140]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d802      	bhi.n	8005586 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005586:	4b20      	ldr	r3, [pc, #128]	; (8005608 <prvAddNewTaskToReadyList+0xd0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3301      	adds	r3, #1
 800558c:	4a1e      	ldr	r2, [pc, #120]	; (8005608 <prvAddNewTaskToReadyList+0xd0>)
 800558e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <prvAddNewTaskToReadyList+0xd0>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <prvAddNewTaskToReadyList+0xd4>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d903      	bls.n	80055ac <prvAddNewTaskToReadyList+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a18      	ldr	r2, [pc, #96]	; (800560c <prvAddNewTaskToReadyList+0xd4>)
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <prvAddNewTaskToReadyList+0xd8>)
 80055ba:	441a      	add	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3304      	adds	r3, #4
 80055c0:	4619      	mov	r1, r3
 80055c2:	4610      	mov	r0, r2
 80055c4:	f7fe fe7f 	bl	80042c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055c8:	f001 fd14 	bl	8006ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055cc:	4b0d      	ldr	r3, [pc, #52]	; (8005604 <prvAddNewTaskToReadyList+0xcc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00e      	beq.n	80055f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055d4:	4b0a      	ldr	r3, [pc, #40]	; (8005600 <prvAddNewTaskToReadyList+0xc8>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	429a      	cmp	r2, r3
 80055e0:	d207      	bcs.n	80055f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <prvAddNewTaskToReadyList+0xdc>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000c88 	.word	0x20000c88
 8005600:	200007b4 	.word	0x200007b4
 8005604:	20000c94 	.word	0x20000c94
 8005608:	20000ca4 	.word	0x20000ca4
 800560c:	20000c90 	.word	0x20000c90
 8005610:	200007b8 	.word	0x200007b8
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d017      	beq.n	800565a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800562a:	4b13      	ldr	r3, [pc, #76]	; (8005678 <vTaskDelay+0x60>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <vTaskDelay+0x30>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	60bb      	str	r3, [r7, #8]
}
 8005644:	bf00      	nop
 8005646:	e7fe      	b.n	8005646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005648:	f000 f986 	bl	8005958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800564c:	2100      	movs	r1, #0
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 ffb4 	bl	80065bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005654:	f000 f98e 	bl	8005974 <xTaskResumeAll>
 8005658:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005660:	4b06      	ldr	r3, [pc, #24]	; (800567c <vTaskDelay+0x64>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005670:	bf00      	nop
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000cb0 	.word	0x20000cb0
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005688:	f001 fc84 	bl	8006f94 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d102      	bne.n	8005698 <vTaskSuspend+0x18>
 8005692:	4b30      	ldr	r3, [pc, #192]	; (8005754 <vTaskSuspend+0xd4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	e000      	b.n	800569a <vTaskSuspend+0x1a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3304      	adds	r3, #4
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fe fe6d 	bl	8004380 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3318      	adds	r3, #24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe fe64 	bl	8004380 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3304      	adds	r3, #4
 80056bc:	4619      	mov	r1, r3
 80056be:	4826      	ldr	r0, [pc, #152]	; (8005758 <vTaskSuspend+0xd8>)
 80056c0:	f7fe fe01 	bl	80042c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d103      	bne.n	80056d8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80056d8:	f001 fc8c 	bl	8006ff4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80056dc:	4b1f      	ldr	r3, [pc, #124]	; (800575c <vTaskSuspend+0xdc>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80056e4:	f001 fc56 	bl	8006f94 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80056e8:	f000 fd96 	bl	8006218 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80056ec:	f001 fc82 	bl	8006ff4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80056f0:	4b18      	ldr	r3, [pc, #96]	; (8005754 <vTaskSuspend+0xd4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d127      	bne.n	800574a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80056fa:	4b18      	ldr	r3, [pc, #96]	; (800575c <vTaskSuspend+0xdc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d017      	beq.n	8005732 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005702:	4b17      	ldr	r3, [pc, #92]	; (8005760 <vTaskSuspend+0xe0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <vTaskSuspend+0xa0>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60bb      	str	r3, [r7, #8]
}
 800571c:	bf00      	nop
 800571e:	e7fe      	b.n	800571e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <vTaskSuspend+0xe4>)
 8005722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005730:	e00b      	b.n	800574a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005732:	4b09      	ldr	r3, [pc, #36]	; (8005758 <vTaskSuspend+0xd8>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <vTaskSuspend+0xe8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d103      	bne.n	8005746 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <vTaskSuspend+0xd4>)
 8005740:	2200      	movs	r2, #0
 8005742:	601a      	str	r2, [r3, #0]
	}
 8005744:	e001      	b.n	800574a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8005746:	f000 fa7d 	bl	8005c44 <vTaskSwitchContext>
	}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	200007b4 	.word	0x200007b4
 8005758:	20000c74 	.word	0x20000c74
 800575c:	20000c94 	.word	0x20000c94
 8005760:	20000cb0 	.word	0x20000cb0
 8005764:	e000ed04 	.word	0xe000ed04
 8005768:	20000c88 	.word	0x20000c88

0800576c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60fb      	str	r3, [r7, #12]
}
 8005794:	bf00      	nop
 8005796:	e7fe      	b.n	8005796 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <prvTaskIsTaskSuspended+0x5c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d10a      	bne.n	80057b8 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a6:	4a09      	ldr	r2, [pc, #36]	; (80057cc <prvTaskIsTaskSuspended+0x60>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d005      	beq.n	80057b8 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80057b4:	2301      	movs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057b8:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000c74 	.word	0x20000c74
 80057cc:	20000c48 	.word	0x20000c48

080057d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <vTaskResume+0x28>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60bb      	str	r3, [r7, #8]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80057f8:	4b20      	ldr	r3, [pc, #128]	; (800587c <vTaskResume+0xac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d038      	beq.n	8005874 <vTaskResume+0xa4>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d035      	beq.n	8005874 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8005808:	f001 fbc4 	bl	8006f94 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f7ff ffad 	bl	800576c <prvTaskIsTaskSuspended>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02b      	beq.n	8005870 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fdaf 	bl	8004380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	4b16      	ldr	r3, [pc, #88]	; (8005880 <vTaskResume+0xb0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d903      	bls.n	8005836 <vTaskResume+0x66>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005832:	4a13      	ldr	r2, [pc, #76]	; (8005880 <vTaskResume+0xb0>)
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <vTaskResume+0xb4>)
 8005844:	441a      	add	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3304      	adds	r3, #4
 800584a:	4619      	mov	r1, r3
 800584c:	4610      	mov	r0, r2
 800584e:	f7fe fd3a 	bl	80042c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005856:	4b09      	ldr	r3, [pc, #36]	; (800587c <vTaskResume+0xac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	429a      	cmp	r2, r3
 800585e:	d307      	bcc.n	8005870 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <vTaskResume+0xb8>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005870:	f001 fbc0 	bl	8006ff4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	200007b4 	.word	0x200007b4
 8005880:	20000c90 	.word	0x20000c90
 8005884:	200007b8 	.word	0x200007b8
 8005888:	e000ed04 	.word	0xe000ed04

0800588c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	; 0x28
 8005890:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800589a:	463a      	mov	r2, r7
 800589c:	1d39      	adds	r1, r7, #4
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fa42 	bl	8003d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	9202      	str	r2, [sp, #8]
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	2300      	movs	r3, #0
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	2300      	movs	r3, #0
 80058b8:	460a      	mov	r2, r1
 80058ba:	4921      	ldr	r1, [pc, #132]	; (8005940 <vTaskStartScheduler+0xb4>)
 80058bc:	4821      	ldr	r0, [pc, #132]	; (8005944 <vTaskStartScheduler+0xb8>)
 80058be:	f7ff fd09 	bl	80052d4 <xTaskCreateStatic>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4a20      	ldr	r2, [pc, #128]	; (8005948 <vTaskStartScheduler+0xbc>)
 80058c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058c8:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <vTaskStartScheduler+0xbc>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058d0:	2301      	movs	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e001      	b.n	80058da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d102      	bne.n	80058e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80058e0:	f000 fec0 	bl	8006664 <xTimerCreateTimerTask>
 80058e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d116      	bne.n	800591a <vTaskStartScheduler+0x8e>
	__asm volatile
 80058ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f0:	f383 8811 	msr	BASEPRI, r3
 80058f4:	f3bf 8f6f 	isb	sy
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	613b      	str	r3, [r7, #16]
}
 80058fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <vTaskStartScheduler+0xc0>)
 8005902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005906:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005908:	4b11      	ldr	r3, [pc, #68]	; (8005950 <vTaskStartScheduler+0xc4>)
 800590a:	2201      	movs	r2, #1
 800590c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800590e:	4b11      	ldr	r3, [pc, #68]	; (8005954 <vTaskStartScheduler+0xc8>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005914:	f001 fa9c 	bl	8006e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005918:	e00e      	b.n	8005938 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005920:	d10a      	bne.n	8005938 <vTaskStartScheduler+0xac>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <vTaskStartScheduler+0xaa>
}
 8005938:	bf00      	nop
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	080076ac 	.word	0x080076ac
 8005944:	080060ad 	.word	0x080060ad
 8005948:	20000cac 	.word	0x20000cac
 800594c:	20000ca8 	.word	0x20000ca8
 8005950:	20000c94 	.word	0x20000c94
 8005954:	20000c8c 	.word	0x20000c8c

08005958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <vTaskSuspendAll+0x18>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3301      	adds	r3, #1
 8005962:	4a03      	ldr	r2, [pc, #12]	; (8005970 <vTaskSuspendAll+0x18>)
 8005964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005966:	bf00      	nop
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000cb0 	.word	0x20000cb0

08005974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005982:	4b42      	ldr	r3, [pc, #264]	; (8005a8c <xTaskResumeAll+0x118>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	603b      	str	r3, [r7, #0]
}
 800599c:	bf00      	nop
 800599e:	e7fe      	b.n	800599e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059a0:	f001 faf8 	bl	8006f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059a4:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <xTaskResumeAll+0x118>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	4a38      	ldr	r2, [pc, #224]	; (8005a8c <xTaskResumeAll+0x118>)
 80059ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ae:	4b37      	ldr	r3, [pc, #220]	; (8005a8c <xTaskResumeAll+0x118>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d162      	bne.n	8005a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059b6:	4b36      	ldr	r3, [pc, #216]	; (8005a90 <xTaskResumeAll+0x11c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d05e      	beq.n	8005a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059be:	e02f      	b.n	8005a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c0:	4b34      	ldr	r3, [pc, #208]	; (8005a94 <xTaskResumeAll+0x120>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	3318      	adds	r3, #24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7fe fcd7 	bl	8004380 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fcd2 	bl	8004380 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e0:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <xTaskResumeAll+0x124>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <xTaskResumeAll+0x7c>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <xTaskResumeAll+0x124>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <xTaskResumeAll+0x128>)
 80059fe:	441a      	add	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fc5d 	bl	80042c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a10:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <xTaskResumeAll+0x12c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005a1a:	4b22      	ldr	r3, [pc, #136]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a20:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <xTaskResumeAll+0x120>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1cb      	bne.n	80059c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a2e:	f000 fbf3 	bl	8006218 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a32:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <xTaskResumeAll+0x134>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a3e:	f000 f847 	bl	8005ad0 <xTaskIncrementTick>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005a48:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f1      	bne.n	8005a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <xTaskResumeAll+0x134>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a60:	4b10      	ldr	r3, [pc, #64]	; (8005aa4 <xTaskResumeAll+0x130>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d009      	beq.n	8005a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a6c:	4b0f      	ldr	r3, [pc, #60]	; (8005aac <xTaskResumeAll+0x138>)
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a7c:	f001 faba 	bl	8006ff4 <vPortExitCritical>

	return xAlreadyYielded;
 8005a80:	68bb      	ldr	r3, [r7, #8]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000cb0 	.word	0x20000cb0
 8005a90:	20000c88 	.word	0x20000c88
 8005a94:	20000c48 	.word	0x20000c48
 8005a98:	20000c90 	.word	0x20000c90
 8005a9c:	200007b8 	.word	0x200007b8
 8005aa0:	200007b4 	.word	0x200007b4
 8005aa4:	20000c9c 	.word	0x20000c9c
 8005aa8:	20000c98 	.word	0x20000c98
 8005aac:	e000ed04 	.word	0xe000ed04

08005ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ab6:	4b05      	ldr	r3, [pc, #20]	; (8005acc <xTaskGetTickCount+0x1c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005abc:	687b      	ldr	r3, [r7, #4]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000c8c 	.word	0x20000c8c

08005ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ada:	4b4f      	ldr	r3, [pc, #316]	; (8005c18 <xTaskIncrementTick+0x148>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 808f 	bne.w	8005c02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae4:	4b4d      	ldr	r3, [pc, #308]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005aec:	4a4b      	ldr	r2, [pc, #300]	; (8005c1c <xTaskIncrementTick+0x14c>)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d120      	bne.n	8005b3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af8:	4b49      	ldr	r3, [pc, #292]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	603b      	str	r3, [r7, #0]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <xTaskIncrementTick+0x46>
 8005b18:	4b41      	ldr	r3, [pc, #260]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	4b41      	ldr	r3, [pc, #260]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3f      	ldr	r2, [pc, #252]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	4a3f      	ldr	r2, [pc, #252]	; (8005c24 <xTaskIncrementTick+0x154>)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3301      	adds	r3, #1
 8005b32:	4a3d      	ldr	r2, [pc, #244]	; (8005c28 <xTaskIncrementTick+0x158>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	f000 fb6f 	bl	8006218 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b3a:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d349      	bcc.n	8005bd8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b44:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4e:	4b37      	ldr	r3, [pc, #220]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b54:	601a      	str	r2, [r3, #0]
					break;
 8005b56:	e03f      	b.n	8005bd8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b58:	4b31      	ldr	r3, [pc, #196]	; (8005c20 <xTaskIncrementTick+0x150>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d203      	bcs.n	8005b78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b70:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <xTaskIncrementTick+0x15c>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b76:	e02f      	b.n	8005bd8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fe fbff 	bl	8004380 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d004      	beq.n	8005b94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fe fbf6 	bl	8004380 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d903      	bls.n	8005ba8 <xTaskIncrementTick+0xd8>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <xTaskIncrementTick+0x160>)
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4a1f      	ldr	r2, [pc, #124]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005bb6:	441a      	add	r2, r3
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	f7fe fb81 	bl	80042c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4b1b      	ldr	r3, [pc, #108]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3b8      	bcc.n	8005b44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd6:	e7b5      	b.n	8005b44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bd8:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <xTaskIncrementTick+0x168>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bde:	4915      	ldr	r1, [pc, #84]	; (8005c34 <xTaskIncrementTick+0x164>)
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	440b      	add	r3, r1
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d901      	bls.n	8005bf4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <xTaskIncrementTick+0x16c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e004      	b.n	8005c0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <xTaskIncrementTick+0x170>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <xTaskIncrementTick+0x170>)
 8005c0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000cb0 	.word	0x20000cb0
 8005c1c:	20000c8c 	.word	0x20000c8c
 8005c20:	20000c40 	.word	0x20000c40
 8005c24:	20000c44 	.word	0x20000c44
 8005c28:	20000ca0 	.word	0x20000ca0
 8005c2c:	20000ca8 	.word	0x20000ca8
 8005c30:	20000c90 	.word	0x20000c90
 8005c34:	200007b8 	.word	0x200007b8
 8005c38:	200007b4 	.word	0x200007b4
 8005c3c:	20000c9c 	.word	0x20000c9c
 8005c40:	20000c98 	.word	0x20000c98

08005c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c4a:	4b28      	ldr	r3, [pc, #160]	; (8005cec <vTaskSwitchContext+0xa8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c52:	4b27      	ldr	r3, [pc, #156]	; (8005cf0 <vTaskSwitchContext+0xac>)
 8005c54:	2201      	movs	r2, #1
 8005c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c58:	e041      	b.n	8005cde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005c5a:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <vTaskSwitchContext+0xac>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c60:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <vTaskSwitchContext+0xb0>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e010      	b.n	8005c8a <vTaskSwitchContext+0x46>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <vTaskSwitchContext+0x40>
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
}
 8005c80:	bf00      	nop
 8005c82:	e7fe      	b.n	8005c82 <vTaskSwitchContext+0x3e>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3b01      	subs	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	491b      	ldr	r1, [pc, #108]	; (8005cf8 <vTaskSwitchContext+0xb4>)
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	440b      	add	r3, r1
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0e4      	beq.n	8005c68 <vTaskSwitchContext+0x24>
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <vTaskSwitchContext+0xb4>)
 8005caa:	4413      	add	r3, r2
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	605a      	str	r2, [r3, #4]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d104      	bne.n	8005cce <vTaskSwitchContext+0x8a>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	605a      	str	r2, [r3, #4]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a09      	ldr	r2, [pc, #36]	; (8005cfc <vTaskSwitchContext+0xb8>)
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	4a06      	ldr	r2, [pc, #24]	; (8005cf4 <vTaskSwitchContext+0xb0>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6013      	str	r3, [r2, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	20000cb0 	.word	0x20000cb0
 8005cf0:	20000c9c 	.word	0x20000c9c
 8005cf4:	20000c90 	.word	0x20000c90
 8005cf8:	200007b8 	.word	0x200007b8
 8005cfc:	200007b4 	.word	0x200007b4

08005d00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10a      	bne.n	8005d26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d26:	4b07      	ldr	r3, [pc, #28]	; (8005d44 <vTaskPlaceOnEventList+0x44>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3318      	adds	r3, #24
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fe faed 	bl	800430e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d34:	2101      	movs	r1, #1
 8005d36:	6838      	ldr	r0, [r7, #0]
 8005d38:	f000 fc40 	bl	80065bc <prvAddCurrentTaskToDelayedList>
}
 8005d3c:	bf00      	nop
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200007b4 	.word	0x200007b4

08005d48 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	617b      	str	r3, [r7, #20]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8005d70:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	613b      	str	r3, [r7, #16]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <vTaskPlaceOnUnorderedEventList+0x74>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005d98:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <vTaskPlaceOnUnorderedEventList+0x74>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3318      	adds	r3, #24
 8005da0:	4619      	mov	r1, r3
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f7fe fa8f 	bl	80042c6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005da8:	2101      	movs	r1, #1
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fc06 	bl	80065bc <prvAddCurrentTaskToDelayedList>
}
 8005db0:	bf00      	nop
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	20000cb0 	.word	0x20000cb0
 8005dbc:	200007b4 	.word	0x200007b4

08005dc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	617b      	str	r3, [r7, #20]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <vTaskPlaceOnEventListRestricted+0x54>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3318      	adds	r3, #24
 8005dee:	4619      	mov	r1, r3
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7fe fa68 	bl	80042c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	68b8      	ldr	r0, [r7, #8]
 8005e06:	f000 fbd9 	bl	80065bc <prvAddCurrentTaskToDelayedList>
	}
 8005e0a:	bf00      	nop
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	200007b4 	.word	0x200007b4

08005e18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	60fb      	str	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	3318      	adds	r3, #24
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fa99 	bl	8004380 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e4e:	4b1e      	ldr	r3, [pc, #120]	; (8005ec8 <xTaskRemoveFromEventList+0xb0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d11d      	bne.n	8005e92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3304      	adds	r3, #4
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe fa90 	bl	8004380 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <xTaskRemoveFromEventList+0xb4>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d903      	bls.n	8005e74 <xTaskRemoveFromEventList+0x5c>
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	4a16      	ldr	r2, [pc, #88]	; (8005ecc <xTaskRemoveFromEventList+0xb4>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4a13      	ldr	r2, [pc, #76]	; (8005ed0 <xTaskRemoveFromEventList+0xb8>)
 8005e82:	441a      	add	r2, r3
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	3304      	adds	r3, #4
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4610      	mov	r0, r2
 8005e8c:	f7fe fa1b 	bl	80042c6 <vListInsertEnd>
 8005e90:	e005      	b.n	8005e9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4619      	mov	r1, r3
 8005e98:	480e      	ldr	r0, [pc, #56]	; (8005ed4 <xTaskRemoveFromEventList+0xbc>)
 8005e9a:	f7fe fa14 	bl	80042c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	; (8005ed8 <xTaskRemoveFromEventList+0xc0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d905      	bls.n	8005eb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005eb0:	4b0a      	ldr	r3, [pc, #40]	; (8005edc <xTaskRemoveFromEventList+0xc4>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	e001      	b.n	8005ebc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ebc:	697b      	ldr	r3, [r7, #20]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000cb0 	.word	0x20000cb0
 8005ecc:	20000c90 	.word	0x20000c90
 8005ed0:	200007b8 	.word	0x200007b8
 8005ed4:	20000c48 	.word	0x20000c48
 8005ed8:	200007b4 	.word	0x200007b4
 8005edc:	20000c9c 	.word	0x20000c9c

08005ee0 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8005eea:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	613b      	str	r3, [r7, #16]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	60fb      	str	r3, [r7, #12]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f7fe fa23 	bl	8004380 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fe fa1e 	bl	8004380 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d903      	bls.n	8005f58 <vTaskRemoveFromUnorderedEventList+0x78>
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	4a0f      	ldr	r2, [pc, #60]	; (8005f94 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8005f66:	441a      	add	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f7fe f9a9 	bl	80042c6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d902      	bls.n	8005f88 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8005f82:	4b07      	ldr	r3, [pc, #28]	; (8005fa0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
	}
}
 8005f88:	bf00      	nop
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20000cb0 	.word	0x20000cb0
 8005f94:	20000c90 	.word	0x20000c90
 8005f98:	200007b8 	.word	0x200007b8
 8005f9c:	200007b4 	.word	0x200007b4
 8005fa0:	20000c9c 	.word	0x20000c9c

08005fa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <vTaskInternalSetTimeOutState+0x24>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <vTaskInternalSetTimeOutState+0x28>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	605a      	str	r2, [r3, #4]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	20000ca0 	.word	0x20000ca0
 8005fcc:	20000c8c 	.word	0x20000c8c

08005fd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10a      	bne.n	8005ff6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006012:	f000 ffbf 	bl	8006f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006016:	4b1d      	ldr	r3, [pc, #116]	; (800608c <xTaskCheckForTimeOut+0xbc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800602e:	d102      	bne.n	8006036 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006030:	2300      	movs	r3, #0
 8006032:	61fb      	str	r3, [r7, #28]
 8006034:	e023      	b.n	800607e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b15      	ldr	r3, [pc, #84]	; (8006090 <xTaskCheckForTimeOut+0xc0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	429a      	cmp	r2, r3
 8006040:	d007      	beq.n	8006052 <xTaskCheckForTimeOut+0x82>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d302      	bcc.n	8006052 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800604c:	2301      	movs	r3, #1
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e015      	b.n	800607e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	697a      	ldr	r2, [r7, #20]
 8006058:	429a      	cmp	r2, r3
 800605a:	d20b      	bcs.n	8006074 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f7ff ff9b 	bl	8005fa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e004      	b.n	800607e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2200      	movs	r2, #0
 8006078:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800607e:	f000 ffb9 	bl	8006ff4 <vPortExitCritical>

	return xReturn;
 8006082:	69fb      	ldr	r3, [r7, #28]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3720      	adds	r7, #32
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000c8c 	.word	0x20000c8c
 8006090:	20000ca0 	.word	0x20000ca0

08006094 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <vTaskMissedYield+0x14>)
 800609a:	2201      	movs	r2, #1
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	20000c9c 	.word	0x20000c9c

080060ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060b4:	f000 f852 	bl	800615c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <prvIdleTask+0x28>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d9f9      	bls.n	80060b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <prvIdleTask+0x2c>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060d0:	e7f0      	b.n	80060b4 <prvIdleTask+0x8>
 80060d2:	bf00      	nop
 80060d4:	200007b8 	.word	0x200007b8
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	e00c      	b.n	8006102 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4a12      	ldr	r2, [pc, #72]	; (800613c <prvInitialiseTaskLists+0x60>)
 80060f4:	4413      	add	r3, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe f8b8 	bl	800426c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3301      	adds	r3, #1
 8006100:	607b      	str	r3, [r7, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b37      	cmp	r3, #55	; 0x37
 8006106:	d9ef      	bls.n	80060e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006108:	480d      	ldr	r0, [pc, #52]	; (8006140 <prvInitialiseTaskLists+0x64>)
 800610a:	f7fe f8af 	bl	800426c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800610e:	480d      	ldr	r0, [pc, #52]	; (8006144 <prvInitialiseTaskLists+0x68>)
 8006110:	f7fe f8ac 	bl	800426c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006114:	480c      	ldr	r0, [pc, #48]	; (8006148 <prvInitialiseTaskLists+0x6c>)
 8006116:	f7fe f8a9 	bl	800426c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800611a:	480c      	ldr	r0, [pc, #48]	; (800614c <prvInitialiseTaskLists+0x70>)
 800611c:	f7fe f8a6 	bl	800426c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006120:	480b      	ldr	r0, [pc, #44]	; (8006150 <prvInitialiseTaskLists+0x74>)
 8006122:	f7fe f8a3 	bl	800426c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <prvInitialiseTaskLists+0x78>)
 8006128:	4a05      	ldr	r2, [pc, #20]	; (8006140 <prvInitialiseTaskLists+0x64>)
 800612a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800612c:	4b0a      	ldr	r3, [pc, #40]	; (8006158 <prvInitialiseTaskLists+0x7c>)
 800612e:	4a05      	ldr	r2, [pc, #20]	; (8006144 <prvInitialiseTaskLists+0x68>)
 8006130:	601a      	str	r2, [r3, #0]
}
 8006132:	bf00      	nop
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	200007b8 	.word	0x200007b8
 8006140:	20000c18 	.word	0x20000c18
 8006144:	20000c2c 	.word	0x20000c2c
 8006148:	20000c48 	.word	0x20000c48
 800614c:	20000c5c 	.word	0x20000c5c
 8006150:	20000c74 	.word	0x20000c74
 8006154:	20000c40 	.word	0x20000c40
 8006158:	20000c44 	.word	0x20000c44

0800615c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006162:	e019      	b.n	8006198 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006164:	f000 ff16 	bl	8006f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006168:	4b10      	ldr	r3, [pc, #64]	; (80061ac <prvCheckTasksWaitingTermination+0x50>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe f903 	bl	8004380 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800617a:	4b0d      	ldr	r3, [pc, #52]	; (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3b01      	subs	r3, #1
 8006180:	4a0b      	ldr	r2, [pc, #44]	; (80061b0 <prvCheckTasksWaitingTermination+0x54>)
 8006182:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006184:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <prvCheckTasksWaitingTermination+0x58>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3b01      	subs	r3, #1
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <prvCheckTasksWaitingTermination+0x58>)
 800618c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800618e:	f000 ff31 	bl	8006ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f810 	bl	80061b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006198:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <prvCheckTasksWaitingTermination+0x58>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e1      	bne.n	8006164 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000c5c 	.word	0x20000c5c
 80061b0:	20000c88 	.word	0x20000c88
 80061b4:	20000c70 	.word	0x20000c70

080061b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d108      	bne.n	80061dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 f8ce 	bl	8007370 <vPortFree>
				vPortFree( pxTCB );
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 f8cb 	bl	8007370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061da:	e018      	b.n	800620e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d103      	bne.n	80061ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 f8c2 	bl	8007370 <vPortFree>
	}
 80061ec:	e00f      	b.n	800620e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d00a      	beq.n	800620e <prvDeleteTCB+0x56>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60fb      	str	r3, [r7, #12]
}
 800620a:	bf00      	nop
 800620c:	e7fe      	b.n	800620c <prvDeleteTCB+0x54>
	}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <prvResetNextTaskUnblockTime+0x38>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <prvResetNextTaskUnblockTime+0x3c>)
 800622a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800622e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006230:	e008      	b.n	8006244 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006232:	4b07      	ldr	r3, [pc, #28]	; (8006250 <prvResetNextTaskUnblockTime+0x38>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a04      	ldr	r2, [pc, #16]	; (8006254 <prvResetNextTaskUnblockTime+0x3c>)
 8006242:	6013      	str	r3, [r2, #0]
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	20000c40 	.word	0x20000c40
 8006254:	20000ca8 	.word	0x20000ca8

08006258 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <xTaskGetCurrentTaskHandle+0x1c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006264:	687b      	ldr	r3, [r7, #4]
	}
 8006266:	4618      	mov	r0, r3
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	200007b4 	.word	0x200007b4

08006278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <xTaskGetSchedulerState+0x34>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d102      	bne.n	800628c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006286:	2301      	movs	r3, #1
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	e008      	b.n	800629e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800628c:	4b08      	ldr	r3, [pc, #32]	; (80062b0 <xTaskGetSchedulerState+0x38>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006294:	2302      	movs	r3, #2
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	e001      	b.n	800629e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800629e:	687b      	ldr	r3, [r7, #4]
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	20000c94 	.word	0x20000c94
 80062b0:	20000cb0 	.word	0x20000cb0

080062b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d051      	beq.n	800636e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	4b2a      	ldr	r3, [pc, #168]	; (8006378 <xTaskPriorityInherit+0xc4>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d241      	bcs.n	800635c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	db06      	blt.n	80062ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062e0:	4b25      	ldr	r3, [pc, #148]	; (8006378 <xTaskPriorityInherit+0xc4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6959      	ldr	r1, [r3, #20]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4a1f      	ldr	r2, [pc, #124]	; (800637c <xTaskPriorityInherit+0xc8>)
 8006300:	4413      	add	r3, r2
 8006302:	4299      	cmp	r1, r3
 8006304:	d122      	bne.n	800634c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe f838 	bl	8004380 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006310:	4b19      	ldr	r3, [pc, #100]	; (8006378 <xTaskPriorityInherit+0xc4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	4b18      	ldr	r3, [pc, #96]	; (8006380 <xTaskPriorityInherit+0xcc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d903      	bls.n	800632e <xTaskPriorityInherit+0x7a>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	4a15      	ldr	r2, [pc, #84]	; (8006380 <xTaskPriorityInherit+0xcc>)
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4a10      	ldr	r2, [pc, #64]	; (800637c <xTaskPriorityInherit+0xc8>)
 800633c:	441a      	add	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7fd ffbe 	bl	80042c6 <vListInsertEnd>
 800634a:	e004      	b.n	8006356 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <xTaskPriorityInherit+0xc4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006356:	2301      	movs	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	e008      	b.n	800636e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <xTaskPriorityInherit+0xc4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	429a      	cmp	r2, r3
 8006368:	d201      	bcs.n	800636e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800636a:	2301      	movs	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800636e:	68fb      	ldr	r3, [r7, #12]
	}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	200007b4 	.word	0x200007b4
 800637c:	200007b8 	.word	0x200007b8
 8006380:	20000c90 	.word	0x20000c90

08006384 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d056      	beq.n	8006448 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800639a:	4b2e      	ldr	r3, [pc, #184]	; (8006454 <xTaskPriorityDisinherit+0xd0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d00a      	beq.n	80063ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60fb      	str	r3, [r7, #12]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063dc:	1e5a      	subs	r2, r3, #1
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d02c      	beq.n	8006448 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d128      	bne.n	8006448 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd ffc0 	bl	8004380 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <xTaskPriorityDisinherit+0xd4>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d903      	bls.n	8006428 <xTaskPriorityDisinherit+0xa4>
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006424:	4a0c      	ldr	r2, [pc, #48]	; (8006458 <xTaskPriorityDisinherit+0xd4>)
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4613      	mov	r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4a09      	ldr	r2, [pc, #36]	; (800645c <xTaskPriorityDisinherit+0xd8>)
 8006436:	441a      	add	r2, r3
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	3304      	adds	r3, #4
 800643c:	4619      	mov	r1, r3
 800643e:	4610      	mov	r0, r2
 8006440:	f7fd ff41 	bl	80042c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006444:	2301      	movs	r3, #1
 8006446:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006448:	697b      	ldr	r3, [r7, #20]
	}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200007b4 	.word	0x200007b4
 8006458:	20000c90 	.word	0x20000c90
 800645c:	200007b8 	.word	0x200007b8

08006460 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800646e:	2301      	movs	r3, #1
 8006470:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d06a      	beq.n	800654e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d902      	bls.n	80064a6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e002      	b.n	80064ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d04b      	beq.n	800654e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d146      	bne.n	800654e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d10a      	bne.n	80064e0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	f383 8811 	msr	BASEPRI, r3
 80064d2:	f3bf 8f6f 	isb	sy
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	60bb      	str	r3, [r7, #8]
}
 80064dc:	bf00      	nop
 80064de:	e7fe      	b.n	80064de <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db04      	blt.n	80064fe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	6959      	ldr	r1, [r3, #20]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4a13      	ldr	r2, [pc, #76]	; (800655c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800650e:	4413      	add	r3, r2
 8006510:	4299      	cmp	r1, r3
 8006512:	d11c      	bne.n	800654e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fd ff31 	bl	8004380 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d903      	bls.n	8006532 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4a07      	ldr	r2, [pc, #28]	; (800655c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006540:	441a      	add	r2, r3
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fd febc 	bl	80042c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800654e:	bf00      	nop
 8006550:	3720      	adds	r7, #32
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200007b4 	.word	0x200007b4
 800655c:	200007b8 	.word	0x200007b8
 8006560:	20000c90 	.word	0x20000c90

08006564 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <uxTaskResetEventItemValue+0x2c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <uxTaskResetEventItemValue+0x2c>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <uxTaskResetEventItemValue+0x2c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8006580:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006582:	687b      	ldr	r3, [r7, #4]
}
 8006584:	4618      	mov	r0, r3
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	200007b4 	.word	0x200007b4

08006594 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006598:	4b07      	ldr	r3, [pc, #28]	; (80065b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d004      	beq.n	80065aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a6:	3201      	adds	r2, #1
 80065a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80065aa:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80065ac:	681b      	ldr	r3, [r3, #0]
	}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	200007b4 	.word	0x200007b4

080065bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <prvAddCurrentTaskToDelayedList+0x90>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065cc:	4b20      	ldr	r3, [pc, #128]	; (8006650 <prvAddCurrentTaskToDelayedList+0x94>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fed4 	bl	8004380 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065de:	d10a      	bne.n	80065f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e6:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <prvAddCurrentTaskToDelayedList+0x94>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4619      	mov	r1, r3
 80065ee:	4819      	ldr	r0, [pc, #100]	; (8006654 <prvAddCurrentTaskToDelayedList+0x98>)
 80065f0:	f7fd fe69 	bl	80042c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065f4:	e026      	b.n	8006644 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4413      	add	r3, r2
 80065fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065fe:	4b14      	ldr	r3, [pc, #80]	; (8006650 <prvAddCurrentTaskToDelayedList+0x94>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	429a      	cmp	r2, r3
 800660c:	d209      	bcs.n	8006622 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660e:	4b12      	ldr	r3, [pc, #72]	; (8006658 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <prvAddCurrentTaskToDelayedList+0x94>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3304      	adds	r3, #4
 8006618:	4619      	mov	r1, r3
 800661a:	4610      	mov	r0, r2
 800661c:	f7fd fe77 	bl	800430e <vListInsert>
}
 8006620:	e010      	b.n	8006644 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006622:	4b0e      	ldr	r3, [pc, #56]	; (800665c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <prvAddCurrentTaskToDelayedList+0x94>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3304      	adds	r3, #4
 800662c:	4619      	mov	r1, r3
 800662e:	4610      	mov	r0, r2
 8006630:	f7fd fe6d 	bl	800430e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	429a      	cmp	r2, r3
 800663c:	d202      	bcs.n	8006644 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800663e:	4a08      	ldr	r2, [pc, #32]	; (8006660 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6013      	str	r3, [r2, #0]
}
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000c8c 	.word	0x20000c8c
 8006650:	200007b4 	.word	0x200007b4
 8006654:	20000c74 	.word	0x20000c74
 8006658:	20000c44 	.word	0x20000c44
 800665c:	20000c40 	.word	0x20000c40
 8006660:	20000ca8 	.word	0x20000ca8

08006664 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	; 0x28
 8006668:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800666e:	f000 fb07 	bl	8006c80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <xTimerCreateTimerTask+0x80>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d021      	beq.n	80066be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006682:	1d3a      	adds	r2, r7, #4
 8006684:	f107 0108 	add.w	r1, r7, #8
 8006688:	f107 030c 	add.w	r3, r7, #12
 800668c:	4618      	mov	r0, r3
 800668e:	f7fd fb67 	bl	8003d60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	9202      	str	r2, [sp, #8]
 800669a:	9301      	str	r3, [sp, #4]
 800669c:	2302      	movs	r3, #2
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	460a      	mov	r2, r1
 80066a4:	4910      	ldr	r1, [pc, #64]	; (80066e8 <xTimerCreateTimerTask+0x84>)
 80066a6:	4811      	ldr	r0, [pc, #68]	; (80066ec <xTimerCreateTimerTask+0x88>)
 80066a8:	f7fe fe14 	bl	80052d4 <xTaskCreateStatic>
 80066ac:	4603      	mov	r3, r0
 80066ae:	4a10      	ldr	r2, [pc, #64]	; (80066f0 <xTimerCreateTimerTask+0x8c>)
 80066b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066b2:	4b0f      	ldr	r3, [pc, #60]	; (80066f0 <xTimerCreateTimerTask+0x8c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066ba:	2301      	movs	r3, #1
 80066bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	613b      	str	r3, [r7, #16]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066da:	697b      	ldr	r3, [r7, #20]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000ce4 	.word	0x20000ce4
 80066e8:	080076b4 	.word	0x080076b4
 80066ec:	08006829 	.word	0x08006829
 80066f0:	20000ce8 	.word	0x20000ce8

080066f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006702:	2300      	movs	r3, #0
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xTimerGenericCommand+0x2e>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <xTimerGenericCommand+0x98>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02a      	beq.n	8006780 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b05      	cmp	r3, #5
 800673a:	dc18      	bgt.n	800676e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800673c:	f7ff fd9c 	bl	8006278 <xTaskGetSchedulerState>
 8006740:	4603      	mov	r3, r0
 8006742:	2b02      	cmp	r3, #2
 8006744:	d109      	bne.n	800675a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006746:	4b11      	ldr	r3, [pc, #68]	; (800678c <xTimerGenericCommand+0x98>)
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	f107 0110 	add.w	r1, r7, #16
 800674e:	2300      	movs	r3, #0
 8006750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006752:	f7fe f833 	bl	80047bc <xQueueGenericSend>
 8006756:	6278      	str	r0, [r7, #36]	; 0x24
 8006758:	e012      	b.n	8006780 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <xTimerGenericCommand+0x98>)
 800675c:	6818      	ldr	r0, [r3, #0]
 800675e:	f107 0110 	add.w	r1, r7, #16
 8006762:	2300      	movs	r3, #0
 8006764:	2200      	movs	r2, #0
 8006766:	f7fe f829 	bl	80047bc <xQueueGenericSend>
 800676a:	6278      	str	r0, [r7, #36]	; 0x24
 800676c:	e008      	b.n	8006780 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <xTimerGenericCommand+0x98>)
 8006770:	6818      	ldr	r0, [r3, #0]
 8006772:	f107 0110 	add.w	r1, r7, #16
 8006776:	2300      	movs	r3, #0
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	f7fe f91d 	bl	80049b8 <xQueueGenericSendFromISR>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006782:	4618      	mov	r0, r3
 8006784:	3728      	adds	r7, #40	; 0x28
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000ce4 	.word	0x20000ce4

08006790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679a:	4b22      	ldr	r3, [pc, #136]	; (8006824 <prvProcessExpiredTimer+0x94>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fd fde9 	bl	8004380 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d022      	beq.n	8006802 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	699a      	ldr	r2, [r3, #24]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	18d1      	adds	r1, r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	6978      	ldr	r0, [r7, #20]
 80067ca:	f000 f8d1 	bl	8006970 <prvInsertTimerInActiveList>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01f      	beq.n	8006814 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067d4:	2300      	movs	r3, #0
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	2300      	movs	r3, #0
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	2100      	movs	r1, #0
 80067de:	6978      	ldr	r0, [r7, #20]
 80067e0:	f7ff ff88 	bl	80066f4 <xTimerGenericCommand>
 80067e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d113      	bne.n	8006814 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60fb      	str	r3, [r7, #12]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	b2da      	uxtb	r2, r3
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	6978      	ldr	r0, [r7, #20]
 800681a:	4798      	blx	r3
}
 800681c:	bf00      	nop
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	20000cdc 	.word	0x20000cdc

08006828 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006830:	f107 0308 	add.w	r3, r7, #8
 8006834:	4618      	mov	r0, r3
 8006836:	f000 f857 	bl	80068e8 <prvGetNextExpireTime>
 800683a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4619      	mov	r1, r3
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f803 	bl	800684c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006846:	f000 f8d5 	bl	80069f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800684a:	e7f1      	b.n	8006830 <prvTimerTask+0x8>

0800684c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006856:	f7ff f87f 	bl	8005958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800685a:	f107 0308 	add.w	r3, r7, #8
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f866 	bl	8006930 <prvSampleTimeNow>
 8006864:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d130      	bne.n	80068ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <prvProcessTimerOrBlockTask+0x3c>
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	429a      	cmp	r2, r3
 8006878:	d806      	bhi.n	8006888 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800687a:	f7ff f87b 	bl	8005974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800687e:	68f9      	ldr	r1, [r7, #12]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff ff85 	bl	8006790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006886:	e024      	b.n	80068d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <prvProcessTimerOrBlockTask+0x90>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <prvProcessTimerOrBlockTask+0x50>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <prvProcessTimerOrBlockTask+0x52>
 800689c:	2300      	movs	r3, #0
 800689e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <prvProcessTimerOrBlockTask+0x94>)
 80068a2:	6818      	ldr	r0, [r3, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	f7fe fcdd 	bl	800526c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068b2:	f7ff f85f 	bl	8005974 <xTaskResumeAll>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068bc:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <prvProcessTimerOrBlockTask+0x98>)
 80068be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	f3bf 8f6f 	isb	sy
}
 80068cc:	e001      	b.n	80068d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068ce:	f7ff f851 	bl	8005974 <xTaskResumeAll>
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000ce0 	.word	0x20000ce0
 80068e0:	20000ce4 	.word	0x20000ce4
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068f0:	4b0e      	ldr	r3, [pc, #56]	; (800692c <prvGetNextExpireTime+0x44>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <prvGetNextExpireTime+0x16>
 80068fa:	2201      	movs	r2, #1
 80068fc:	e000      	b.n	8006900 <prvGetNextExpireTime+0x18>
 80068fe:	2200      	movs	r2, #0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d105      	bne.n	8006918 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800690c:	4b07      	ldr	r3, [pc, #28]	; (800692c <prvGetNextExpireTime+0x44>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	e001      	b.n	800691c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800691c:	68fb      	ldr	r3, [r7, #12]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	20000cdc 	.word	0x20000cdc

08006930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006938:	f7ff f8ba 	bl	8005ab0 <xTaskGetTickCount>
 800693c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800693e:	4b0b      	ldr	r3, [pc, #44]	; (800696c <prvSampleTimeNow+0x3c>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	429a      	cmp	r2, r3
 8006946:	d205      	bcs.n	8006954 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006948:	f000 f936 	bl	8006bb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	e002      	b.n	800695a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800695a:	4a04      	ldr	r2, [pc, #16]	; (800696c <prvSampleTimeNow+0x3c>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006960:	68fb      	ldr	r3, [r7, #12]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000cec 	.word	0x20000cec

08006970 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	429a      	cmp	r2, r3
 8006994:	d812      	bhi.n	80069bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069a4:	2301      	movs	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e01b      	b.n	80069e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069aa:	4b10      	ldr	r3, [pc, #64]	; (80069ec <prvInsertTimerInActiveList+0x7c>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f7fd fcaa 	bl	800430e <vListInsert>
 80069ba:	e012      	b.n	80069e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d206      	bcs.n	80069d2 <prvInsertTimerInActiveList+0x62>
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d302      	bcc.n	80069d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069cc:	2301      	movs	r3, #1
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	e007      	b.n	80069e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069d2:	4b07      	ldr	r3, [pc, #28]	; (80069f0 <prvInsertTimerInActiveList+0x80>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3304      	adds	r3, #4
 80069da:	4619      	mov	r1, r3
 80069dc:	4610      	mov	r0, r2
 80069de:	f7fd fc96 	bl	800430e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069e2:	697b      	ldr	r3, [r7, #20]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	20000ce0 	.word	0x20000ce0
 80069f0:	20000cdc 	.word	0x20000cdc

080069f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08e      	sub	sp, #56	; 0x38
 80069f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069fa:	e0ca      	b.n	8006b92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da18      	bge.n	8006a34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	3304      	adds	r3, #4
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	61fb      	str	r3, [r7, #28]
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2a:	6850      	ldr	r0, [r2, #4]
 8006a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2e:	6892      	ldr	r2, [r2, #8]
 8006a30:	4611      	mov	r1, r2
 8006a32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f2c0 80aa 	blt.w	8006b90 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d004      	beq.n	8006a52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fd fc97 	bl	8004380 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a52:	463b      	mov	r3, r7
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff ff6b 	bl	8006930 <prvSampleTimeNow>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b09      	cmp	r3, #9
 8006a60:	f200 8097 	bhi.w	8006b92 <prvProcessReceivedCommands+0x19e>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <prvProcessReceivedCommands+0x78>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a95 	.word	0x08006a95
 8006a74:	08006a95 	.word	0x08006a95
 8006a78:	08006b09 	.word	0x08006b09
 8006a7c:	08006b1d 	.word	0x08006b1d
 8006a80:	08006b67 	.word	0x08006b67
 8006a84:	08006a95 	.word	0x08006a95
 8006a88:	08006a95 	.word	0x08006a95
 8006a8c:	08006b09 	.word	0x08006b09
 8006a90:	08006b1d 	.word	0x08006b1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	18d1      	adds	r1, r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab4:	f7ff ff5c 	bl	8006970 <prvInsertTimerInActiveList>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d069      	beq.n	8006b92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d05e      	beq.n	8006b92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	441a      	add	r2, r3
 8006adc:	2300      	movs	r3, #0
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae6:	f7ff fe05 	bl	80066f4 <xTimerGenericCommand>
 8006aea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d14f      	bne.n	8006b92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	61bb      	str	r3, [r7, #24]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b1a:	e03a      	b.n	8006b92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10a      	bne.n	8006b52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	617b      	str	r3, [r7, #20]
}
 8006b4e:	bf00      	nop
 8006b50:	e7fe      	b.n	8006b50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	699a      	ldr	r2, [r3, #24]
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	18d1      	adds	r1, r2, r3
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b60:	f7ff ff06 	bl	8006970 <prvInsertTimerInActiveList>
					break;
 8006b64:	e015      	b.n	8006b92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d103      	bne.n	8006b7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006b74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b76:	f000 fbfb 	bl	8007370 <vPortFree>
 8006b7a:	e00a      	b.n	8006b92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b8e:	e000      	b.n	8006b92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b92:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <prvProcessReceivedCommands+0x1c0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	1d39      	adds	r1, r7, #4
 8006b98:	2200      	movs	r2, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fd ffa8 	bl	8004af0 <xQueueReceive>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f47f af2a 	bne.w	80069fc <prvProcessReceivedCommands+0x8>
	}
}
 8006ba8:	bf00      	nop
 8006baa:	bf00      	nop
 8006bac:	3730      	adds	r7, #48	; 0x30
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000ce4 	.word	0x20000ce4

08006bb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bbe:	e048      	b.n	8006c52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bca:	4b2b      	ldr	r3, [pc, #172]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fd fbd1 	bl	8004380 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d02e      	beq.n	8006c52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d90e      	bls.n	8006c24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c12:	4b19      	ldr	r3, [pc, #100]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f7fd fb76 	bl	800430e <vListInsert>
 8006c22:	e016      	b.n	8006c52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c24:	2300      	movs	r3, #0
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	2300      	movs	r3, #0
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff fd60 	bl	80066f4 <xTimerGenericCommand>
 8006c34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	603b      	str	r3, [r7, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1b1      	bne.n	8006bc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c62:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <prvSwitchTimerLists+0xc4>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a04      	ldr	r2, [pc, #16]	; (8006c78 <prvSwitchTimerLists+0xc0>)
 8006c68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c6a:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <prvSwitchTimerLists+0xc4>)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	6013      	str	r3, [r2, #0]
}
 8006c70:	bf00      	nop
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000cdc 	.word	0x20000cdc
 8006c7c:	20000ce0 	.word	0x20000ce0

08006c80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c86:	f000 f985 	bl	8006f94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c8a:	4b15      	ldr	r3, [pc, #84]	; (8006ce0 <prvCheckForValidListAndQueue+0x60>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d120      	bne.n	8006cd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c92:	4814      	ldr	r0, [pc, #80]	; (8006ce4 <prvCheckForValidListAndQueue+0x64>)
 8006c94:	f7fd faea 	bl	800426c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c98:	4813      	ldr	r0, [pc, #76]	; (8006ce8 <prvCheckForValidListAndQueue+0x68>)
 8006c9a:	f7fd fae7 	bl	800426c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c9e:	4b13      	ldr	r3, [pc, #76]	; (8006cec <prvCheckForValidListAndQueue+0x6c>)
 8006ca0:	4a10      	ldr	r2, [pc, #64]	; (8006ce4 <prvCheckForValidListAndQueue+0x64>)
 8006ca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ca4:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <prvCheckForValidListAndQueue+0x70>)
 8006ca6:	4a10      	ldr	r2, [pc, #64]	; (8006ce8 <prvCheckForValidListAndQueue+0x68>)
 8006ca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006caa:	2300      	movs	r3, #0
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <prvCheckForValidListAndQueue+0x74>)
 8006cb0:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <prvCheckForValidListAndQueue+0x78>)
 8006cb2:	2110      	movs	r1, #16
 8006cb4:	200a      	movs	r0, #10
 8006cb6:	f7fd fbf5 	bl	80044a4 <xQueueGenericCreateStatic>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <prvCheckForValidListAndQueue+0x60>)
 8006cbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cc0:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <prvCheckForValidListAndQueue+0x60>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006cc8:	4b05      	ldr	r3, [pc, #20]	; (8006ce0 <prvCheckForValidListAndQueue+0x60>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	490b      	ldr	r1, [pc, #44]	; (8006cfc <prvCheckForValidListAndQueue+0x7c>)
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7fe faa2 	bl	8005218 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cd4:	f000 f98e 	bl	8006ff4 <vPortExitCritical>
}
 8006cd8:	bf00      	nop
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000ce4 	.word	0x20000ce4
 8006ce4:	20000cb4 	.word	0x20000cb4
 8006ce8:	20000cc8 	.word	0x20000cc8
 8006cec:	20000cdc 	.word	0x20000cdc
 8006cf0:	20000ce0 	.word	0x20000ce0
 8006cf4:	20000d90 	.word	0x20000d90
 8006cf8:	20000cf0 	.word	0x20000cf0
 8006cfc:	080076bc 	.word	0x080076bc

08006d00 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006d0e:	f06f 0301 	mvn.w	r3, #1
 8006d12:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <xTimerPendFunctionCallFromISR+0x3c>)
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	f107 0114 	add.w	r1, r7, #20
 8006d28:	2300      	movs	r3, #0
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	f7fd fe44 	bl	80049b8 <xQueueGenericSendFromISR>
 8006d30:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3728      	adds	r7, #40	; 0x28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20000ce4 	.word	0x20000ce4

08006d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3b04      	subs	r3, #4
 8006d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3b04      	subs	r3, #4
 8006d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f023 0201 	bic.w	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	3b04      	subs	r3, #4
 8006d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d70:	4a0c      	ldr	r2, [pc, #48]	; (8006da4 <pxPortInitialiseStack+0x64>)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3b14      	subs	r3, #20
 8006d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3b04      	subs	r3, #4
 8006d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f06f 0202 	mvn.w	r2, #2
 8006d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3b20      	subs	r3, #32
 8006d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d96:	68fb      	ldr	r3, [r7, #12]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	08006da9 	.word	0x08006da9

08006da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006db2:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <prvTaskExitError+0x54>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dba:	d00a      	beq.n	8006dd2 <prvTaskExitError+0x2a>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60fb      	str	r3, [r7, #12]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <prvTaskExitError+0x28>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	60bb      	str	r3, [r7, #8]
}
 8006de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006de6:	bf00      	nop
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0fc      	beq.n	8006de8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000024 	.word	0x20000024

08006e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <pxCurrentTCBConst2>)
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	f380 8809 	msr	PSP, r0
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f04f 0000 	mov.w	r0, #0
 8006e16:	f380 8811 	msr	BASEPRI, r0
 8006e1a:	4770      	bx	lr
 8006e1c:	f3af 8000 	nop.w

08006e20 <pxCurrentTCBConst2>:
 8006e20:	200007b4 	.word	0x200007b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop

08006e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e28:	4808      	ldr	r0, [pc, #32]	; (8006e4c <prvPortStartFirstTask+0x24>)
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	6800      	ldr	r0, [r0, #0]
 8006e2e:	f380 8808 	msr	MSP, r0
 8006e32:	f04f 0000 	mov.w	r0, #0
 8006e36:	f380 8814 	msr	CONTROL, r0
 8006e3a:	b662      	cpsie	i
 8006e3c:	b661      	cpsie	f
 8006e3e:	f3bf 8f4f 	dsb	sy
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	df00      	svc	0
 8006e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e4a:	bf00      	nop
 8006e4c:	e000ed08 	.word	0xe000ed08

08006e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e56:	4b46      	ldr	r3, [pc, #280]	; (8006f70 <xPortStartScheduler+0x120>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a46      	ldr	r2, [pc, #280]	; (8006f74 <xPortStartScheduler+0x124>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d10a      	bne.n	8006e76 <xPortStartScheduler+0x26>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	613b      	str	r3, [r7, #16]
}
 8006e72:	bf00      	nop
 8006e74:	e7fe      	b.n	8006e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e76:	4b3e      	ldr	r3, [pc, #248]	; (8006f70 <xPortStartScheduler+0x120>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a3f      	ldr	r2, [pc, #252]	; (8006f78 <xPortStartScheduler+0x128>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d10a      	bne.n	8006e96 <xPortStartScheduler+0x46>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	60fb      	str	r3, [r7, #12]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e96:	4b39      	ldr	r3, [pc, #228]	; (8006f7c <xPortStartScheduler+0x12c>)
 8006e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	22ff      	movs	r2, #255	; 0xff
 8006ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	4b31      	ldr	r3, [pc, #196]	; (8006f80 <xPortStartScheduler+0x130>)
 8006ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ebe:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <xPortStartScheduler+0x134>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec4:	e009      	b.n	8006eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ec6:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <xPortStartScheduler+0x134>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	4a2d      	ldr	r2, [pc, #180]	; (8006f84 <xPortStartScheduler+0x134>)
 8006ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d0ef      	beq.n	8006ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ee6:	4b27      	ldr	r3, [pc, #156]	; (8006f84 <xPortStartScheduler+0x134>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f1c3 0307 	rsb	r3, r3, #7
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d00a      	beq.n	8006f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	60bb      	str	r3, [r7, #8]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f08:	4b1e      	ldr	r3, [pc, #120]	; (8006f84 <xPortStartScheduler+0x134>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	4a1d      	ldr	r2, [pc, #116]	; (8006f84 <xPortStartScheduler+0x134>)
 8006f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f12:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <xPortStartScheduler+0x134>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f1a:	4a1a      	ldr	r2, [pc, #104]	; (8006f84 <xPortStartScheduler+0x134>)
 8006f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f26:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <xPortStartScheduler+0x138>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a17      	ldr	r2, [pc, #92]	; (8006f88 <xPortStartScheduler+0x138>)
 8006f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <xPortStartScheduler+0x138>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a14      	ldr	r2, [pc, #80]	; (8006f88 <xPortStartScheduler+0x138>)
 8006f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f3e:	f000 f8dd 	bl	80070fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f42:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <xPortStartScheduler+0x13c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f48:	f000 f8fc 	bl	8007144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f4c:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <xPortStartScheduler+0x140>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a0f      	ldr	r2, [pc, #60]	; (8006f90 <xPortStartScheduler+0x140>)
 8006f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f58:	f7ff ff66 	bl	8006e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f5c:	f7fe fe72 	bl	8005c44 <vTaskSwitchContext>
	prvTaskExitError();
 8006f60:	f7ff ff22 	bl	8006da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	e000ed00 	.word	0xe000ed00
 8006f74:	410fc271 	.word	0x410fc271
 8006f78:	410fc270 	.word	0x410fc270
 8006f7c:	e000e400 	.word	0xe000e400
 8006f80:	20000de0 	.word	0x20000de0
 8006f84:	20000de4 	.word	0x20000de4
 8006f88:	e000ed20 	.word	0xe000ed20
 8006f8c:	20000024 	.word	0x20000024
 8006f90:	e000ef34 	.word	0xe000ef34

08006f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	607b      	str	r3, [r7, #4]
}
 8006fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <vPortEnterCritical+0x58>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	4a0d      	ldr	r2, [pc, #52]	; (8006fec <vPortEnterCritical+0x58>)
 8006fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fb8:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <vPortEnterCritical+0x58>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d10f      	bne.n	8006fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fc0:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <vPortEnterCritical+0x5c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	603b      	str	r3, [r7, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	e7fe      	b.n	8006fde <vPortEnterCritical+0x4a>
	}
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20000024 	.word	0x20000024
 8006ff0:	e000ed04 	.word	0xe000ed04

08006ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ffa:	4b12      	ldr	r3, [pc, #72]	; (8007044 <vPortExitCritical+0x50>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <vPortExitCritical+0x24>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	607b      	str	r3, [r7, #4]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <vPortExitCritical+0x50>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3b01      	subs	r3, #1
 800701e:	4a09      	ldr	r2, [pc, #36]	; (8007044 <vPortExitCritical+0x50>)
 8007020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <vPortExitCritical+0x50>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d105      	bne.n	8007036 <vPortExitCritical+0x42>
 800702a:	2300      	movs	r3, #0
 800702c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f383 8811 	msr	BASEPRI, r3
}
 8007034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000024 	.word	0x20000024
	...

08007050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007050:	f3ef 8009 	mrs	r0, PSP
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	4b15      	ldr	r3, [pc, #84]	; (80070b0 <pxCurrentTCBConst>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	f01e 0f10 	tst.w	lr, #16
 8007060:	bf08      	it	eq
 8007062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	6010      	str	r0, [r2, #0]
 800706c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007074:	f380 8811 	msr	BASEPRI, r0
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f7fe fde0 	bl	8005c44 <vTaskSwitchContext>
 8007084:	f04f 0000 	mov.w	r0, #0
 8007088:	f380 8811 	msr	BASEPRI, r0
 800708c:	bc09      	pop	{r0, r3}
 800708e:	6819      	ldr	r1, [r3, #0]
 8007090:	6808      	ldr	r0, [r1, #0]
 8007092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007096:	f01e 0f10 	tst.w	lr, #16
 800709a:	bf08      	it	eq
 800709c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80070a0:	f380 8809 	msr	PSP, r0
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w

080070b0 <pxCurrentTCBConst>:
 80070b0:	200007b4 	.word	0x200007b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop

080070b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070d2:	f7fe fcfd 	bl	8005ad0 <xTaskIncrementTick>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070dc:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <xPortSysTickHandler+0x40>)
 80070de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	2300      	movs	r3, #0
 80070e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f383 8811 	msr	BASEPRI, r3
}
 80070ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007100:	4b0b      	ldr	r3, [pc, #44]	; (8007130 <vPortSetupTimerInterrupt+0x34>)
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007106:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <vPortSetupTimerInterrupt+0x38>)
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800710c:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <vPortSetupTimerInterrupt+0x3c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a0a      	ldr	r2, [pc, #40]	; (800713c <vPortSetupTimerInterrupt+0x40>)
 8007112:	fba2 2303 	umull	r2, r3, r2, r3
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	4a09      	ldr	r2, [pc, #36]	; (8007140 <vPortSetupTimerInterrupt+0x44>)
 800711a:	3b01      	subs	r3, #1
 800711c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800711e:	4b04      	ldr	r3, [pc, #16]	; (8007130 <vPortSetupTimerInterrupt+0x34>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	e000e010 	.word	0xe000e010
 8007134:	e000e018 	.word	0xe000e018
 8007138:	20000018 	.word	0x20000018
 800713c:	10624dd3 	.word	0x10624dd3
 8007140:	e000e014 	.word	0xe000e014

08007144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007154 <vPortEnableVFP+0x10>
 8007148:	6801      	ldr	r1, [r0, #0]
 800714a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800714e:	6001      	str	r1, [r0, #0]
 8007150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007152:	bf00      	nop
 8007154:	e000ed88 	.word	0xe000ed88

08007158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800715e:	f3ef 8305 	mrs	r3, IPSR
 8007162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d914      	bls.n	8007194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800716a:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <vPortValidateInterruptPriority+0x70>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007174:	4b15      	ldr	r3, [pc, #84]	; (80071cc <vPortValidateInterruptPriority+0x74>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	7afa      	ldrb	r2, [r7, #11]
 800717a:	429a      	cmp	r2, r3
 800717c:	d20a      	bcs.n	8007194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <vPortValidateInterruptPriority+0x78>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800719c:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <vPortValidateInterruptPriority+0x7c>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d90a      	bls.n	80071ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	603b      	str	r3, [r7, #0]
}
 80071b6:	bf00      	nop
 80071b8:	e7fe      	b.n	80071b8 <vPortValidateInterruptPriority+0x60>
	}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	e000e3f0 	.word	0xe000e3f0
 80071cc:	20000de0 	.word	0x20000de0
 80071d0:	e000ed0c 	.word	0xe000ed0c
 80071d4:	20000de4 	.word	0x20000de4

080071d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08a      	sub	sp, #40	; 0x28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071e4:	f7fe fbb8 	bl	8005958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071e8:	4b5b      	ldr	r3, [pc, #364]	; (8007358 <pvPortMalloc+0x180>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071f0:	f000 f920 	bl	8007434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071f4:	4b59      	ldr	r3, [pc, #356]	; (800735c <pvPortMalloc+0x184>)
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f040 8093 	bne.w	8007328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d01d      	beq.n	8007244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007208:	2208      	movs	r2, #8
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4413      	add	r3, r2
 800720e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	2b00      	cmp	r3, #0
 8007218:	d014      	beq.n	8007244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f023 0307 	bic.w	r3, r3, #7
 8007220:	3308      	adds	r3, #8
 8007222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <pvPortMalloc+0x6c>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	617b      	str	r3, [r7, #20]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d06e      	beq.n	8007328 <pvPortMalloc+0x150>
 800724a:	4b45      	ldr	r3, [pc, #276]	; (8007360 <pvPortMalloc+0x188>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d869      	bhi.n	8007328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007254:	4b43      	ldr	r3, [pc, #268]	; (8007364 <pvPortMalloc+0x18c>)
 8007256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007258:	4b42      	ldr	r3, [pc, #264]	; (8007364 <pvPortMalloc+0x18c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800725e:	e004      	b.n	800726a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	429a      	cmp	r2, r3
 8007272:	d903      	bls.n	800727c <pvPortMalloc+0xa4>
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1f1      	bne.n	8007260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800727c:	4b36      	ldr	r3, [pc, #216]	; (8007358 <pvPortMalloc+0x180>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007282:	429a      	cmp	r2, r3
 8007284:	d050      	beq.n	8007328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2208      	movs	r2, #8
 800728c:	4413      	add	r3, r2
 800728e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	6a3b      	ldr	r3, [r7, #32]
 8007296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	2308      	movs	r3, #8
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d91f      	bls.n	80072e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80072a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <pvPortMalloc+0xf8>
	__asm volatile
 80072ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072be:	f383 8811 	msr	BASEPRI, r3
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	f3bf 8f4f 	dsb	sy
 80072ca:	613b      	str	r3, [r7, #16]
}
 80072cc:	bf00      	nop
 80072ce:	e7fe      	b.n	80072ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	1ad2      	subs	r2, r2, r3
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072e2:	69b8      	ldr	r0, [r7, #24]
 80072e4:	f000 f908 	bl	80074f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072e8:	4b1d      	ldr	r3, [pc, #116]	; (8007360 <pvPortMalloc+0x188>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	4a1b      	ldr	r2, [pc, #108]	; (8007360 <pvPortMalloc+0x188>)
 80072f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072f6:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <pvPortMalloc+0x188>)
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <pvPortMalloc+0x190>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d203      	bcs.n	800730a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007302:	4b17      	ldr	r3, [pc, #92]	; (8007360 <pvPortMalloc+0x188>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a18      	ldr	r2, [pc, #96]	; (8007368 <pvPortMalloc+0x190>)
 8007308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	4b13      	ldr	r3, [pc, #76]	; (800735c <pvPortMalloc+0x184>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	431a      	orrs	r2, r3
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	2200      	movs	r2, #0
 800731c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <pvPortMalloc+0x194>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	4a11      	ldr	r2, [pc, #68]	; (800736c <pvPortMalloc+0x194>)
 8007326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007328:	f7fe fb24 	bl	8005974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <pvPortMalloc+0x174>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60fb      	str	r3, [r7, #12]
}
 8007348:	bf00      	nop
 800734a:	e7fe      	b.n	800734a <pvPortMalloc+0x172>
	return pvReturn;
 800734c:	69fb      	ldr	r3, [r7, #28]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3728      	adds	r7, #40	; 0x28
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200049f0 	.word	0x200049f0
 800735c:	20004a04 	.word	0x20004a04
 8007360:	200049f4 	.word	0x200049f4
 8007364:	200049e8 	.word	0x200049e8
 8007368:	200049f8 	.word	0x200049f8
 800736c:	200049fc 	.word	0x200049fc

08007370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d04d      	beq.n	800741e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007382:	2308      	movs	r3, #8
 8007384:	425b      	negs	r3, r3
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	4413      	add	r3, r2
 800738a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	4b24      	ldr	r3, [pc, #144]	; (8007428 <vPortFree+0xb8>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4013      	ands	r3, r2
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <vPortFree+0x44>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	60fb      	str	r3, [r7, #12]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <vPortFree+0x62>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60bb      	str	r3, [r7, #8]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <vPortFree+0xb8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01e      	beq.n	800741e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11a      	bne.n	800741e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	4b0e      	ldr	r3, [pc, #56]	; (8007428 <vPortFree+0xb8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	43db      	mvns	r3, r3
 80073f2:	401a      	ands	r2, r3
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073f8:	f7fe faae 	bl	8005958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	685a      	ldr	r2, [r3, #4]
 8007400:	4b0a      	ldr	r3, [pc, #40]	; (800742c <vPortFree+0xbc>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4413      	add	r3, r2
 8007406:	4a09      	ldr	r2, [pc, #36]	; (800742c <vPortFree+0xbc>)
 8007408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800740a:	6938      	ldr	r0, [r7, #16]
 800740c:	f000 f874 	bl	80074f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <vPortFree+0xc0>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	3301      	adds	r3, #1
 8007416:	4a06      	ldr	r2, [pc, #24]	; (8007430 <vPortFree+0xc0>)
 8007418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800741a:	f7fe faab 	bl	8005974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800741e:	bf00      	nop
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20004a04 	.word	0x20004a04
 800742c:	200049f4 	.word	0x200049f4
 8007430:	20004a00 	.word	0x20004a00

08007434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800743a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800743e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007440:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <prvHeapInit+0xac>)
 8007442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00c      	beq.n	8007468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3307      	adds	r3, #7
 8007452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0307 	bic.w	r3, r3, #7
 800745a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	4a1f      	ldr	r2, [pc, #124]	; (80074e0 <prvHeapInit+0xac>)
 8007464:	4413      	add	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800746c:	4a1d      	ldr	r2, [pc, #116]	; (80074e4 <prvHeapInit+0xb0>)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <prvHeapInit+0xb0>)
 8007474:	2200      	movs	r2, #0
 8007476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	4413      	add	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007480:	2208      	movs	r2, #8
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0307 	bic.w	r3, r3, #7
 800748e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <prvHeapInit+0xb4>)
 8007494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <prvHeapInit+0xb4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2200      	movs	r2, #0
 800749c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800749e:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <prvHeapInit+0xb4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80074b4:	4b0c      	ldr	r3, [pc, #48]	; (80074e8 <prvHeapInit+0xb4>)
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <prvHeapInit+0xb8>)
 80074c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	4a09      	ldr	r2, [pc, #36]	; (80074f0 <prvHeapInit+0xbc>)
 80074ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074cc:	4b09      	ldr	r3, [pc, #36]	; (80074f4 <prvHeapInit+0xc0>)
 80074ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074d2:	601a      	str	r2, [r3, #0]
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000de8 	.word	0x20000de8
 80074e4:	200049e8 	.word	0x200049e8
 80074e8:	200049f0 	.word	0x200049f0
 80074ec:	200049f8 	.word	0x200049f8
 80074f0:	200049f4 	.word	0x200049f4
 80074f4:	20004a04 	.word	0x20004a04

080074f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007500:	4b28      	ldr	r3, [pc, #160]	; (80075a4 <prvInsertBlockIntoFreeList+0xac>)
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e002      	b.n	800750c <prvInsertBlockIntoFreeList+0x14>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d8f7      	bhi.n	8007506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	4413      	add	r3, r2
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	429a      	cmp	r2, r3
 8007526:	d108      	bne.n	800753a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	441a      	add	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	441a      	add	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d118      	bne.n	8007580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d00d      	beq.n	8007576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	441a      	add	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e008      	b.n	8007588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e003      	b.n	8007588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d002      	beq.n	8007596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007596:	bf00      	nop
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	200049e8 	.word	0x200049e8
 80075a8:	200049f0 	.word	0x200049f0

080075ac <__libc_init_array>:
 80075ac:	b570      	push	{r4, r5, r6, lr}
 80075ae:	4d0d      	ldr	r5, [pc, #52]	; (80075e4 <__libc_init_array+0x38>)
 80075b0:	4c0d      	ldr	r4, [pc, #52]	; (80075e8 <__libc_init_array+0x3c>)
 80075b2:	1b64      	subs	r4, r4, r5
 80075b4:	10a4      	asrs	r4, r4, #2
 80075b6:	2600      	movs	r6, #0
 80075b8:	42a6      	cmp	r6, r4
 80075ba:	d109      	bne.n	80075d0 <__libc_init_array+0x24>
 80075bc:	4d0b      	ldr	r5, [pc, #44]	; (80075ec <__libc_init_array+0x40>)
 80075be:	4c0c      	ldr	r4, [pc, #48]	; (80075f0 <__libc_init_array+0x44>)
 80075c0:	f000 f82e 	bl	8007620 <_init>
 80075c4:	1b64      	subs	r4, r4, r5
 80075c6:	10a4      	asrs	r4, r4, #2
 80075c8:	2600      	movs	r6, #0
 80075ca:	42a6      	cmp	r6, r4
 80075cc:	d105      	bne.n	80075da <__libc_init_array+0x2e>
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075d4:	4798      	blx	r3
 80075d6:	3601      	adds	r6, #1
 80075d8:	e7ee      	b.n	80075b8 <__libc_init_array+0xc>
 80075da:	f855 3b04 	ldr.w	r3, [r5], #4
 80075de:	4798      	blx	r3
 80075e0:	3601      	adds	r6, #1
 80075e2:	e7f2      	b.n	80075ca <__libc_init_array+0x1e>
 80075e4:	080077c4 	.word	0x080077c4
 80075e8:	080077c4 	.word	0x080077c4
 80075ec:	080077c4 	.word	0x080077c4
 80075f0:	080077c8 	.word	0x080077c8

080075f4 <memcpy>:
 80075f4:	440a      	add	r2, r1
 80075f6:	4291      	cmp	r1, r2
 80075f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80075fc:	d100      	bne.n	8007600 <memcpy+0xc>
 80075fe:	4770      	bx	lr
 8007600:	b510      	push	{r4, lr}
 8007602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800760a:	4291      	cmp	r1, r2
 800760c:	d1f9      	bne.n	8007602 <memcpy+0xe>
 800760e:	bd10      	pop	{r4, pc}

08007610 <memset>:
 8007610:	4402      	add	r2, r0
 8007612:	4603      	mov	r3, r0
 8007614:	4293      	cmp	r3, r2
 8007616:	d100      	bne.n	800761a <memset+0xa>
 8007618:	4770      	bx	lr
 800761a:	f803 1b01 	strb.w	r1, [r3], #1
 800761e:	e7f9      	b.n	8007614 <memset+0x4>

08007620 <_init>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	bf00      	nop
 8007624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007626:	bc08      	pop	{r3}
 8007628:	469e      	mov	lr, r3
 800762a:	4770      	bx	lr

0800762c <_fini>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr
